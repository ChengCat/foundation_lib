/*! \mainpage Overview

	\subpage build_page
	<br>
	\subpage test_page
	<br>
	\subpage tools_page
	<br>
	\subpage using_page
	<br>

    \page build_page Building the library
    \tableofcontents
    \section overview Overview

    \subsection configs Configurations
    The library can be built in four different build configurations with increasing amount of optimizations
    and decreasing amount of debug possibilities. The configurations are named debug, release, profile and deploy
    with the deploy configuration the recommended configuration for releases to the public.

    \subsubsection debug Debug
    In debug configuration no optimizations are enabled and all debug functionality is available in the library, including
    asserts, logging and error handling. This configuration is intented for development purposes.

    \subsubsection release Release
    In release configuration most optimizations are enabled and all debug functionality is available in the library, including
    asserts, logging and error handling. This configuration is intented for testing purposes.

    \subsubsection profile Profile
    In profile configuration all optimizations are enabled and all debug functionality is disabled in the library, including
    asserts, logging and error handling. Profiling hooks and measurements are included in the library code. This configuration
    is intented for profiling purposes, as it is identical to the final deploy build except for profiling code being enabled.

    \subsubsection deploy Deploy
    In deploy configuration all optimizations are enabled and all debug functionality is disabled in the library, including
    asserts, logging and error handling. Profiling is also disabled. This configuration is intented for public releases.

	\subsection output Output
	Libraries will be placed in lib/[platform]/[configuration]/ with platform names
	<ul>
	<li>win32
	<li>win64
	<li>osx
	<li>ios
	<li>android
	</ul>
	Configuration names are
	<ul>
	<li>debug
	<li>release
	<li>profile
	<li>deploy
	</ul>
	For android each architecture has it's own subdirectory and separate library
	<ul>
	<li>armeabi
	<li>armeabi-v7a
	<li>x86
	<li>mips
	</ul>

	Test cases are built as separate binaries with a launcher binary, placed in bin/[platform]/[configuration]/

    \section windows Windows
	On Windows we currently support building with Microsoft and Intel compilers with Visual Studio 2012/2013, as well as
	with Microsoft, Intel, GCC and clang compilers using SCons. Both 32 and 64 bit Windows are supported.
	\subsection win_vstudio Visual Studio
	To build with Visual Studio, open the foundation.sln solution file for the Visual Studio version used. Currently
	there are solution files provided for Visual Studio 2012 and 2013 in build/vs12 and build/vs13 respectively.

	To build all targets and configurations use batch build, select all targets and build. 

	\subsection win_scons SCons
	To build with SCons verify the configuration set in build/scons/SConfig. You can also set all options as key=value
	arguments on the command line. For example, to build release configuration with intel compiler use
	"scons config=release tools=intel"

	If you use SublimeText there is a template SublimeText project with a SCons build tool setup in build/foundation.sublime-project

    \section osx MacOS X
	\subsection osx_xcode XCode
	XCode is the only supported method of building the library and test cases on MacOS X. Open the XCode workspace in
	build/xcode/foundation.xcworkspace and build the appropriate targets. The workspace contains projects both for OSX and iOS.

    \section linux Linux
    \subsection linux_scons SCons
    SCons is the only supported method of building the library on Linux. verify the configuration set in build/scons/SConfig.
    You can also set all options as key=value arguments on the command line. For example, to build release configuration with gnu
    compiler use "scons config=release tools=gnu"

	If you use SublimeText there is a template SublimeText project with a SCons build tool setup in build/foundation.sublime-project

    \section ios iOS
	\subsection ios_xcode XCode
	XCode is the only supported method of building the library and test cases for iOS. Open the XCode workspace in
	build/xcode/foundation.xcworkspace and build the appropriate targets. The workspace contains projects both for OSX and iOS.

    \section android Android
	\subsection android_ndk NDK build
	The NDK build system is the only supported method of building the library and test cases for Android. You can
	build on any host platform supported by the Android SDK/NDK. The library and test cases are built for all supported
	hardware architectures available through the NDK (armeabi, armeabi-v7a, x86 and mips).

	For armeabi-v7a the library is built in ARM instruction mode (not THUMB) and has NEON enabled.

	From the root directory run "ndk-build -C build/android NDK_DEBUG=1" for a debug build. For other configurations,
	run "ndk-build -C build/android NDK_DEBUG=0 BUILD_RELEASE=1" and replace BUILD_RELEASE with the configuration wanted
	(BUILD_RELEASE, BUILD_PROFILE, BUILD_DEPLOY).

	\page test_page Running and verifying the test cases

	The test cases is wrapped by a launcher application named test-all which will enumerate and launch each test executable
	in sequence, aborting on failure. For iOS and Android all test cases are linked into the launcher executable to avoid
	installing lots of small apps on the target device.

	To install the test launcher on Android, change to the build/android subdirectory and use the Android SDK ant build
	system to install it with "ant debug install". For more information on running and debugging apps on emulators and/or
	devices refer to the Android SDK documentation.

	\page tools_page Using the tools provided by the library

	The library comes with a number of useful tools to help with development of applications.

	\section hashify Hashify

	The hashify tool is used to generate headers with predefined hashed strings from definition text files. The library
	itself has one such header in foundation/hashstrings.h which is generated from foundation/hashstrings.txt

	To use the tool simply run it with the path to each definition file as argument, for example "hashify foundation/hashstrings.txt".
	It will by default generate a file named like the definition file with the extension replaces with ".h". For more
	options refer to the help information output by running hashify without any arguments.

	The hashify tool will not touch the output file if it does not need updating, to avoid changing timestamps of the header
	file and trigger rebuilds. This makes it suitable for automatic execution in build farms and similar environments.

	\page using_page Using the foundation library in a project

	To be written...
*/
