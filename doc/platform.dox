/*!

\file platform.h
\brief Platform abstractions
\details This file unifies platform definitions and data types across supported platforms and compilers.
If you need to override platform or architecture, predefine one of <code>FOUNDATION_PLATFORM_[...]</code> and <code>FOUNDATION_ARCH_[...]</code> to 1

All preprocessor macros are designed to be always defined and used by value, i.e a check should be performed like
<code>\#if FOUNDATION_PLATFORM_[...]</code> rather than <code>\#ifdef FOUNDATION_PLATFORM_[...]</code>, since this solves the potential problem of typos in
preprocessor checks (the <code>\#if</code> test will most likely catch the typo with an not defined error, whereas the
<code>\#ifdef</code> macro will just resolve to false)

Use the macros defined in this file for platform/arch definitions, attributes and thread local storage to ensure maximum portability across supported platforms

\def FOUNDATION_COMPILE
\brief Internal compilation flag
\details Defined to 1 when compiling the foundation library, undefined (or zero) when using the library

\def FOUNDATION_EXTERN
\brief Declare a variable visible to users of the library
\details Declare a variable visible to users of the library

\def FOUNDATION_API
\brief Declare a function visible to users of the library
\details Declare a function visible to users of the library

\def FOUNDATION_PLATFORM_ANDROID
\brief Android platform flag
\details Defined to 1 if compiling for android platforms, 0 otherwise

\def FOUNDATION_PLATFORM_IOS
\brief iOD platform flag
\details Defined to 1 if compiling for iOS platforms (iPhone/iPad and simulators), 0 otherwise

\def FOUNDATION_PLATFORM_IOS_SIMULATOR
\brief iOS simulator platform flag
\details Defined to 1 if compiling for iOS simulator (also has FOUNDATION_PLATFORM_IOS defined to 1), 0 otherwise

\def FOUNDATION_PLATFORM_MACOSX
\brief MacOS X platform flag
\details Defined to 1 if compiling for MacOS X, 0 otherwise

\def FOUNDATION_PLATFORM_LINUX
\brief Linux platform flag
\details Defined to 1 if compiling for Linux, 0 otherwise

\def FOUNDATION_PLATFORM_LINUX_RASPBERRYPI
\brief Raspberry Pi platform flag
\details Defined to 1 if compiling for Raspberry Pi (also has FOUNDATION_PLATFORM_LINUX defined to 1), 0 otherwise

\def FOUNDATION_PLATFORM_BSD
\brief BSD platform flag
\details Defined to 1 if compiling for BSD, 0 otherwise

\def FOUNDATION_PLATFORM_WINDOWS
\brief Windows platform flag
\details Defined to 1 if compiling for Windows, 0 otherwise

\def FOUNDATION_PLATFORM_APPLE
\brief Apple platform group flag
\details Defined to 1 if compiling for Apple platforms (MacOS X, iOS, iOS simulator), 0 otherwise

\def FOUNDATION_PLATFORM_POSIX
\brief Posix platform group flag
\details Defined to 1 if compiling for POSIX platforms (Linux, BSD, MacOS X, iOS, iOS simulator, Android), 0 otherwise

\def FOUNDATION_PLATFORM_FAMILY_MOBILE
\brief Mobile platform family flag
\details Defined to 1 if compiling for mobile platforms (iOS, iOS simulator, Android), 0 otherwise

\def FOUNDATION_PLATFORM_FAMILY_DESKTOP
\brief Desktop platform family flag
\details Defined to 1 if compiling for desktop platforms (Windows, MacOS X, Linux, Raspberry Pi, BSD), 0 otherwise

\def FOUNDATION_PLATFORM_FAMILY_CONSOLE
\brief Console platform family flag
\details Defined to 1 if compiling for console platforms (iOS, iOS simulator, Android), 0 otherwise

\def FOUNDATION_ARCH_ARM
\brief ARM architecture flag
\details Defined to 1 if compiling for ARM architectures, 0 otherwise

\def FOUNDATION_ARCH_ARM5
\brief ARMv5 architecture flag
\details Defined to 1 if compiling for ARMv5 architectures, 0 otherwise

\def FOUNDATION_ARCH_ARM6
\brief ARMv6 architecture flag
\details Defined to 1 if compiling for ARMv6 architectures, 0 otherwise

\def FOUNDATION_ARCH_ARM7
\brief ARMv7 architecture flag
\details Defined to 1 if compiling for ARMv7 architectures, 0 otherwise

\def FOUNDATION_ARCH_ARM8
\brief ARMv8 architecture flag
\details Defined to 1 if compiling for ARMv8 architectures, 0 otherwise

\def FOUNDATION_ARCH_ARM_64
\brief ARM 64-bit architecture flag
\details Defined to 1 if compiling for 64-bit ARM architectures, 0 otherwise

\def FOUNDATION_ARCH_ARM8_64
\brief ARMv8 64-bit architecture flag
\details Defined to 1 if compiling for 64-bit ARMv8 architectures, 0 otherwise

\def FOUNDATION_ARCH_X86
\brief x86 architecture flag
\details Defined to 1 if compiling for x86 architectures, 0 otherwise

\def FOUNDATION_ARCH_X86_64
\brief x86-64 architecture flag
\details Defined to 1 if compiling for x86-64 architectures, 0 otherwise

\def FOUNDATION_ARCH_PPC
\brief PPC architecture flag
\details Defined to 1 if compiling for PPC architectures, 0 otherwise

\def FOUNDATION_ARCH_PPC_64
\brief PPC 64-bit architecture flag
\details Defined to 1 if compiling for 64-bit PPC architectures, 0 otherwise

\def FOUNDATION_ARCH_IA64
\brief IA-64 architecture flag
\details Defined to 1 if compiling for IA64 architectures, 0 otherwise

\def FOUNDATION_ARCH_MIPS
\brief MIPS architecture flag
\details Defined to 1 if compiling for MIPS architectures, 0 otherwise

\def FOUNDATION_ARCH_MIPS_64
\brief MIPS 64-bit architecture flag
\details Defined to 1 if compiling for 64-bit MIPS architectures, 0 otherwise

\def FOUNDATION_ARCH_SSE2
\brief SSE2 architecture capability flag
\details Defined to 1 if compiling with SSE2 instruction set enabled, 0 otherwise

\def FOUNDATION_ARCH_SSE3
\brief SSE3 architecture capability flag
\details Defined to 1 if compiling with SSE3 instruction set enabled, 0 otherwise

\def FOUNDATION_ARCH_SSE4
\brief SSE4 architecture capability flag
\details Defined to 1 if compiling with SSE4 instruction set enabled, 0 otherwise

\def FOUNDATION_ARCH_SSE4_FMA3
\brief SSE4 FMA3 architecture capability flag
\details Defined to 1 if compiling with SSE4 instruction set (including FMA3 instruction) enabled, 0 otherwise

\def FOUNDATION_ARCH_NEON
\brief NEON architecture capability flag
\details Defined to 1 if compiling with NEON instruction set enabled, 0 otherwise

\def FOUNDATION_ARCH_THUMB
\brief THUMB architecture capability flag
\details Defined to 1 if compiling for ARM THUMB instruction set, 0 otherwise

\def FOUNDATION_ARCH_ENDIAN_LITTLE
\brief Little endian architecture flag
\details Defined to 1 if compiling for little endian architectures, 0 otherwise

\def FOUNDATION_ARCH_ENDIAN_BIG
\brief Big endian architecture flag
\details Defined to 1 if compiling for big endian architectures, 0 otherwise

\def FOUNDATION_COMPILER_CLANG
\brief CLang compiler flag
\details Defined to 1 if compiling with clang, 0 otherwise

\def FOUNDATION_COMPILER_GCC
\brief GCC compiler flag
\details Defined to 1 if compiling with GCC, 0 otherwise

\def FOUNDATION_COMPILER_MSVC
\brief Microsoft compiler flag
\details Defined to 1 if compiling with Microsoft compiler, 0 otherwise

\def FOUNDATION_COMPILER_INTEL
\brief Intel compiler flag
\details Defined to 1 if compiling with Intel compiler, 0 otherwise

\def FOUNDATION_COMPILER_NAME
\brief Compiler name
\details A string naming the compiler used

\def FOUNDATION_COMPILER_DESCRIPTION
\brief Compiler description
\details A string with a more detailed description of the compiler used, name and version

\def FOUNDATION_SIZE_REAL
\brief Size of real type
\details Declare the size of a real number, in bytes. Either 4 or 8 bytes for 32 or 64 bit, respectively. Default to 32 bit

\def FOUNDATION_SIZE_POINTER
\brief Size of pointer type
\details Defines the size of a pointer on the current architecture, in bytes. Either 4 or 8 bytes for 32 and 64 bit architectures, respectively

\def FOUNDATION_SIZE_WCHAR
\brief Size of wchar_t type
\details Defines the size of the wchar_t type, in bytes, depending on platform

\def FOUNDATION_MAX_PATHLEN
\brief Maximum path length
\details Defines the maximum length of a path

\def FOUNDATION_DECLARE_THREAD_LOCAL
\brief Declare a thread local variable
\details Declare a thread-local variable of the given type, name and initial value. Only works for types that can be safely cast through a uintptr_t (integers, pointers...).
This will also declare and implement two inlined functions to set and get value of the variable, called get_thread_[name] and set_thread_[name]. For example, to declare
a thread-local integer and use the get/set functions:
<pre>FOUNDATION_DECLARE_THREAD_LOCAL( int, myvar, 0 );
set_thread_myvar( 1 );
int currentval = get_thread_myvar();</pre>
This macro is guaranteed to work across all supported platforms even when TLS is not available. For maximum portability use these macros instead of THREADLOCAL.
\param type    Data type
\param name    Variable name
\param init    Initial value

\def FOUNDATION_DECLARE_THREAD_LOCAL_ARRAY
\brief Declare a thread local array
\details Declare a thread-local array of the given type, name and array size. This will also declare and implement
one inlined function to get the array pointer value of the variable, called get_thread_[name]. For example, to declare
a thread-local integer array and use the get/set functions:
<pre>FOUNDATION_DECLARE_THREAD_LOCAL_ARRAY( int, myvar, 10 );
int* currentarr = get_thread_myvar(); //Get thread-local array storage
currentarr[2] = 10;
int val = currentarr[2];</pre>
\param type    Data type
\param name    Variable name
\param arrsize Size of array in number of elements

\def RESTRICT
\brief Restrict attribute
\details Restrict attribute, defined to nothing if compiler does not support restrict

\def THREADLOCAL
\brief Thread local attribyte
\details Thread local attribute, defined to nothing if the compiler/platform/architecture does not support thread local variables. For full platform support, use FOUNDATION_DECLARE_THREAD_LOCAL instead

\def DEPRECATED
\brief Deprecated attribute
\details Deprecated attribute, marking a function/variable as deprecated

\def FORCEINLINE
\brief Force inline attribute
\details Attribute to force function to be inlined

\def NOINLINE
\brief Prevent inline attribute
\details Attribute to prevent function from being inlined

\def PURECALL
\brief Pure call attribute
\details Attribute declaring function to be pure, meaning it has no effects except the return value and the return value depends only on the parameters and/or global variables

\def CONSTCALL
\brief Const call attribute
\details Attribute declaring function to be const, meaning it does not examine any values except the arguments, and has no effects except the return value.
Basically this is just slightly more strict class than the PURECALL attribute, since function is not allowed to read global memory.
Note that a function that has pointer arguments and examines the data pointed to must not be declared const. Likewise, a function that calls a non-const
function usually must not be const. It does not make sense for a const function to return void.

\def ALIGN
\brief Align attribute
\details Variable or type attribute declaring the variable/type to have the specified memory alignment
\param alignment Alignment

\def ALIGNOF
\brief Get alignment
\details Get the alignment of the given type or variable
\param type Type or variable

\def ALIGNED_STRUCT
\brief Declare aligned struct
\details Declare an aligned struct type
\param name Struct name
\param alignment Alignment

\typedef float32_t
\brief 32-bit floating point type
\details Floating point type guaranteed to be 32-bit in size

\typedef float64_t
\brief 64-bit floating point type
\details Floating point type guaranteed to be 64-bit in size

\typedef real
\brief Standard floating point type
\details Floating point type of the size chosen in build config (32 or 64 bit). See FOUNDATION_SIZE_REAL for declaring size used.

\def FLOAT32_C
\brief Declare 32-bit floating point constant
\details Declare a 32-bit floating point constant. Use for automatic suffixing, for example FLOAT32_C(1.0)
\param x      Constant value

\def FLOAT64_C
\brief Declare 64-bit floating point constant
\details Declare a 64-bit floating point constant. Use for automatic suffixing, for example FLOAT64_C(1.0)
\param x      Constant value

\def REAL_C
\brief Declare floating point constant
\details Declare a real constant. Use for automatic suffixing depending on floating point notation used, for example REAL_C(1.0)
\param x      Constant value

\struct uint128_t
\brief 128-bit unsigned integer type
\details 128-bit unsigned integer type

\struct uint256_t
\brief 256-bit unsigned integer type
\details 256-bit unsigned integer type

\struct atomic32_t
\brief 32-bit atomic integer
\details 32-bit atomic integer, use atomic_* functions to load/store values atomically (see atomic.h documentation)

\struct atomic64_t
\brief 64-bit atomic integer
\details 64-bit atomic integer, use atomic_* functions to load/store values atomically (see atomic.h documentation)

\struct atomicptr_t
\brief Atomic pointer
\details Atomic pointer, use atomic_* functions to load/store values atomically (see atomic.h documentation)

\fn uint128_t uint128_make( const uint64_t low, const uint64_t high )
\brief Declare 128-bit value
\details Declare a 128-bit unsigned int value from low and high 64-bit components
\param low     Low 64 bits
\param high    High 64 bits
\return        128-bit integer value

\fn bool uint128_equal( const uint128_t u0, const uint128_t u1 )
\brief Compare 128-bit values
\details Query if two 128-bit unsigned int values are equal
\param u0      First value
\param u1      Second value
\return        true if values are equal, false if not

\fn uint128_t uint128_null( void )
\brief Zero 128-bit value
\details Declare a zero (null) 128-bit unsigned int value
\return        Zero 128-bit value

\fn bool uint128_is_null( const uint128_t u0 )
\brief Compare 128-bit value to zero
\details Query if a 128-bit unsigned int value is zero (null)
\param u0      value
\return        true if value is zero (null), false if not

\fn uint256_t uint256_make( const uint64_t w0, const uint64_t w1, const uint64_t w2, const uint64_t w3 )
\brief Declare 256-bit value
\details Declare a 256-bit unsigned int value from four 64-bit components
\param w0      First (lowest) 64 bits
\param w1      Second 64 bits
\param w2      Third 64 bits
\param w3      Fourth (highest) 64 bits
\return        256-bit integer value

\fn bool uint256_equal( const uint256_t u0, const uint256_t u1 )
\brief Compare 256-bit values
\details Query if two 256-bit unsigned int values are equal
\param u0      First value
\param u1      Second value
\return        true if values are equal, false if not

\fn uint256_t uint256_null( void )
\brief Zero 256-bit value
\details Declare a zero (null) 256-bit unsigned int value
\return        Zero 256-bit value

\fn bool uint256_is_null( const uint256_t u0 )
\brief Compare 256-bit value to zero
\details Query if a 256-bit unsigned int value is zero (null)
\param u0      Value
\return        true if value is zero (null), false if not

\def pointer_offset
\brief Offset pointer
\details Offset a non-const pointer the given number of bytes, disregarding type of pointer
\param ptr     Pointer
\param ofs     Offset in bytes (positive or negative)

\def pointer_offset_const
\brief Offset const pointer
\details Offset a const pointer the given number of bytes, disregarding type of pointer
\param ptr     Pointer
\param ofs     Offset in bytes (positive or negative)

\def pointer_diff
\brief Calculate pointer difference
\details Calculate the offset in bytes between two pointers (from first to second), disregarding type of pointer
\param first   First pointer
\param second  Second pointer

\def PRIREAL
\brief Floating point printf format specifier
\details Printf-style format declaration for a real variable.
Use like other standard PRI* format specifiers, like <code>string_format( "Value: %" PRIREAL, realval );</code>

\def PRIfixPTR
\brief Pointer printf format specifier
\details Printf-style format declaration for a pointer variable producing a fixed-size string (padding with zeroes).
Use like other standard PRI* format specifiers, like <code>string_format( "Value: %" PRIfixPTR, ptr );</code>

*/
