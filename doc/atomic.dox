
/*!

\file atomic.h
\brief Atomic operations and memory fences
\details Atomic operations and memory fences. For an excellent source of information on memory models, atomic
instructions and memory barrier/fences, go to http://mintomic.github.io/lock-free/memory-model/ and/or
http://en.cppreference.com/w/cpp/atomic/memory_order

Atomic operations provide a means to atomically load, store and perform basic operations to a 32/64 bit data
location. On Windows all atomic store/modify functions also provide a full memory fence (both acquire and release).

Signal fences guarantee memory order between threads on same core or between interrupt and signal.

Thread fences guarantee memory order between multiple threads on a multicore system


\fn int32_t atomic_load32( atomic32_t* src )
\brief Atomically load value
\details Atomically load 32 bit value
\param src                  Value
\return                     Current value

\fn int64_t atomic_load64( atomic64_t* src )
\brief Atomically load value
\details Atomically load 64 bit value
\param src                  Value
\return                     Current value

\fn void* atomic_loadptr( atomicptr_t* src )
\brief Atomically load value
\details Atomically load pointer value
\param src                  Value
\return                     Current value

\fn void atomic_store32( atomic32_t* dst, int32_t val )
\brief Atomically store value
\details Atomically store 32 bit value
\param dst                  Target
\param val                  Value to store

\fn void atomic_store64( atomic64_t* dst, int64_t val )
\brief Atomically store value
\details Atomically store 64 bit value
\param dst                  Target
\param val                  Value to store

\fn void atomic_storeptr( atomicptr_t* dst, void* val )
\brief Atomically store value
\details Atomically store pointer value
\param dst                  Target
\param val                  Value to store

\fn int32_t atomic_add32( atomic32_t* val, int32_t add )
\brief Atomically add value
\details Atomically add to the value of the 32 bit integer and returns its new value
\param val                  Value to change
\param add                  Value to add
\return                     New value after addition

\fn int64_t atomic_add64( atomic64_t* val, int64_t add )
\brief Atomically add value
\details Atomically add to the value of the 64 bit integer and returns its new value
\param val                  Value to change
\param add                  Value to add
\return                     New value after addition

\fn int32_t atomic_incr32( atomic32_t* val )
\brief Atomically increase value
\details Atomically increases the value of the 32 bit integer and returns its new value
\param val                  Value to change
\return                     New value after addition

\fn int64_t atomic_incr64( atomic64_t* val )
\brief Atomically increase value
\details Atomically increases the value of the 64 bit integer and returns its new value
\param val                  Value to change
\return                     New value after addition

\fn int32_t atomic_decr32( atomic32_t* val )
\brief Atomically decrease value
\details Atomically decreases the value of the 32 bit integer and returns its new value
\param val                  Value to change
\return                     New value after addition

\fn int64_t atomic_decr64( atomic64_t* val )
\brief Atomically decrease value
\details Atomically decreases the value of the 64 bit integer and returns its new value
\param val                  Value to change
\return                     New value after addition

\fn int32_t atomic_exchange_and_add32( atomic32_t* val, int32_t add )
\brief Atomically add value
\details Atomically add to the value of the 32 bit integer and returns its old value
\param val                  Value to change
\param add                  Value to add
\return                     Old value before addition

\fn int64_t atomic_exchange_and_add64( atomic64_t* val, int64_t add )
\brief Atomically add value
\details Atomically add to the value of the 64 bit integer and returns its old value
\param val                  Value to change
\param add                  Value to add
\return                     Old value before addition

\fn bool atomic_cas32( atomic32_t* dst, int32_t val, int32_t ref )
\brief Atomically compare and swap (CAS)
\details Atomically compare and swap (CAS). The value in the destination location is compared to the reference
value, and if equal the new value is stored in the destination location.
\param dst                  Value to change
\param val                  Value to set
\param ref                  Reference value
\return                     true if operation was successful (new value stored), false if not

\fn bool atomic_cas64( atomic64_t* dst, int64_t val, int64_t ref )
\brief Atomically compare and swap (CAS)
\details Atomically compare and swap (CAS). The value in the destination location is compared to the reference
value, and if equal the new value is stored in the destination location.
\param dst                  Value to change
\param val                  Value to set
\param ref                  Reference value
\return                     true if operation was successful (new value stored), false if not

\fn bool atomic_cas_ptr( atomicptr_t* dst, void* val, void* ref )
\brief Atomically compare and swap (CAS)
\details Atomically compare and swap (CAS). The value in the destination location is compared to the reference
value, and if equal the new value is stored in the destination location.
\param dst                  Value to change
\param val                  Value to set
\param ref                  Reference value
\return                     true if operation was successful (new value stored), false if not

\fn atomic_signal_fence_acquire
\brief Signal acquire fence
\details Signal fence to make prior writes to other memory locations visible. Implemented as a compile
barrier on all supported platforms

\fn atomic_signal_fence_release
\brief Signal release fence
\details Signal fence to make prior writes to other memory locations visible to functions doing a
acquire fence. Implemented as a compile barrier on all supported platforms

\fn atomic_signal_fence_sequentially_consistent
\brief Signal total order fence
\details Signal fence combining acquire and release order as well as providing a single total order
on all sequentially consistent fences. Implemented as a compile barrier on all supported platforms

\fn atomic_thread_fence_acquire
\brief Thread acquire fence
\details Thread fence making prior writes made to other memory locations done by a thread doing a release
fence visible to the calling thread.

\fn atomic_thread_fence_release
\brief Thread release fence
\details Thread fence making prior writes visible to other thread to do an acquire fence.

\fn atomic_thread_fence_sequentially_consistent
\brief Thread total order fence
\details Thread fence combining an acquire and release fence as well as enforcing a single total order
on all sequentially consistent fences.

*/
