/*

\file build.h
Build setup. This header contains all the compile time build setup for the foundation library.

This header unifies the debug/release build macros across platforms, build systems and compiler and provides the following
macro idenfiers, usable with <i>\#if BUILD_[type]</i> conditionals

<ul>
<li>BUILD_DEBUG   - Debug build
<li>BUILD_RELEASE - Release build
<li>BUILD_PROFILE - Deploy build with profiling
<li>BUILD_DEPLOY  - Deploy build
</ul>
 
Feature enable/disable control is made through the various <i>BUILD_ENABLE_[...]</i> preprocessor definitions declared
in this header. The value of a flag is interpreted as disabled if the value is 0, and enabled for all other values (with
1 being the normal value for enabled). These enable flags can also be set externally on compilation command lines or in
source files prior to inclusion of foundation headers. Note that some affect if source code is compiled in or discarded
in the library, so it is recommended to set all values inside this header.

There are also a number of <i>BUILD_SIZE_[...]</i> defines for preallocated buffer sizes used. These definitions have
to be made inside this header since they are only used in the library source code and not affecting external code.
Refer to each definition for the meaning and default value.


\def BUILD_DEBUG
Set to 1 for debug build, 0 otherwise. Debug builds are by default unoptimized with full debugging functionality enabled such as asserts, logging, memory tracking and other features.

\def BUILD_RELEASE
Set to 1 for release build, 0 otherwise. Release builds are by default optimized but with a normal set of debugging functionality enabled such as asserts, some logging and memory tracking.

\def BUILD_PROFILE
Set to 1 for profile build, 0 otherwise. Profile builds are by default fully optimized and all debugging functionality disabled, but with profiling calls enabled.

\def BUILD_DEPLOY
Set to 1 for deploy build, 0 otherwise. Deploy builds are by default fully optimized and have all debugging and profiling functionality disabled.

\def BUILD_ENABLE_ASSERT
Control if runtime asserts are enabled. Default value is enabled in debug and release builds, and disabled in profile and deploy builds. If asserts are
disabled, all assert macros will reduce to void (no evaluated code). See assert.h documentation for more information on asserts.

\def BUILD_ENABLE_ERROR_CONTEXT
Control if error context tracking is enabled. Default value is enabled in debug and release builds, and disabled in profile and deploy builds.
If error context tracking is disabled, all calls to set error context will reduce to void (no evaluated code). See error.h documentation for more
information on error context tracking.

\def BUILD_ENABLE_LOG
Control if logging is enabled. Default value is enabled in debug and release builds on all platforms, disabled in profile and deploy builds on
console/mobile platform families, and enabled in profile and deploy builds on all other platforms. If logging is disabled, all calls to log
functions will reduce to void (no evaluated code). See log.h documentation for more information on log functions.

\def BUILD_ENABLE_DEBUG_LOG
Control if debug logging is enabled. Similar to BUILD_ENABLE_LOG, but explicitly controls debug level logging. Default value is enabled in debug builds,
 and disabled in all other builds. Depends on BUILD_ENABLE_LOG

\def BUILD_ENABLE_CONFIG_DEBUG
Control if extra debug logging is enabled in the config module. Default is disabled in all builds.

\def BUILD_ENABLE_PROFILE
Control if profiling is enabled. Default value is enabled in debug, release and profile builds, and disabled in deploy builds. If profiling is disabled,
all calls to profile functions will reduce to void (no evaluated code). See profile.h documentation for more information on profiling calls.

\def BUILD_ENABLE_MEMORY_CONTEXT
Control is memory context tracking is enabled. Default value is enabled in debug and release builds, and disabled in profile and deploy builds. If
memory context tracking is disabled, all calls to track memory context will reduce to void (no evaluated code). See memory.h documentation for more
information on memory context tracking.

\def BUILD_ENABLE_MEMORY_TRACKER
Control if memory tracking is enabled. Default value is enabled in debug and release builds, and disabled in profile and deploy builds. If memory
tracking is enabled, each memoruy allocation and deallocation will incur a slight overhead to track the origin of the call and enable memory leak
detection. For more information on memory tracking, check the memory.h documentation.

\def BUILD_ENABLE_MEMORY_GUARD
Control if memory guarding is enabled. Default value is enabled in debug and release builds, and disabled in profile and deploy builds. Memory
guarding incurs a slight memory overhead on each allocation, and enables over/underwrite detection on memory deallocation. For more information on
memory guarding, check the memory.h documentation.

\def BUILD_ENABLE_STATIC_HASH_DEBUG
Control if static string hashing debugging is enabled. Default value is enabled in debug and release builds on desktop platforms, and disabled all
other build configurations and/or platforms. Static string hash debugging enables sanity checking in statically hashed strings, as well as reverse
lookup of string hashes. See hash.h documentation for more information on statically hashed strings.

\def BUILD_DEFAULT_STREAM_BYTEORDER
The default stream byte order used if the byte order is not explicitly set on a stream. Default value is little endian, matching most supported
architectures.

\def BUILD_SIZE_THREAD_MAP
The maximum number of concurrently allocated thread objects

\def BUILD_SIZE_LIBRARY_MAP
The maximum number of concurrently allocated dynamic library objects

\def BUILD_SIZE_TEMPORARY_MEMORY
Default size of temporary (linear) memory allocator buffer

\def BUILD_SIZE_EVENT_BLOCK_LIMIT
Maximum allowed size for an event block (memory used by events between event processing calls)

\def BUILD_SIZE_EVENT_BLOCK_CHUNK
Size with which the event block size increases each time it runs out of memory (until it reaches BUILD_SIZE_EVENT_BLOCK_LIMIT)

\def BUILD_SIZE_DEFAULT_THREAD_STACK
Default size for thread stacks

\def BUILD_SIZE_ERROR_CONTEXT_DEPTH
Maximum error context depth

\def BUILD_SIZE_MEMORY_CONTEXT_DEPTH
Maximum memory context depth

\def BUILD_SIZE_STACKTRACE_DEPTH
Maximum stacktrace depth

\def BUILD_SIZE_FS_MONITORS
Maximum number of filesystem monitors

\def BUILD_SIZE_STATIC_HASH_STORE
Maximum number of statically hashed strings stored in lookup (if BUILD_ENABLE_STATIC_HASH_DEBUG is enabled)

*/
