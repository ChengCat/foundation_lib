
\fn char* string_from_int_buffer( char* buffer, int64_t val, unsigned int width, char padding )
\brief Convert int into buffer
\details Convert an integer into a preallocated string, with optional field width and fill character
\param buffer Preallocated string (has to be large enough to hold integer representation)
\param val Integer value
\param width Field width
\param padding Fill character
\return String

\fn char* string_from_uint_buffer( char* buffer, uint64_t val, bool hex, unsigned int width, char padding )
\brief Convert unsigned int into buffer
\details Convert an unsigned integer into a preallocated string, with optional hexadecimal base and base prefix, field width and fill character
\param buffer Preallocated string (has to be large enough to hold integer representation)
\param val Integer value
\param hex Hexadecimal flag
\param width Field width
\param padding Fill character
\return String (buffer)

\fn char* string_from_uint128_buffer( char* buffer, const uint128_t val )
\brief Convert 128-bit unsigned int into buffer
\details Convert an 128-bit unsigned integer into a preallocated string
\param buffer Preallocated string (has to be large enough to hold integer representation)
\param val Integer value
\return String (buffer)

\fn char* string_from_real_buffer( char* buffer, real val, unsigned int precision, unsigned int width, char padding )
\brief Convert float into buffer
\details Convert a float into a preallocated string, with optional fixed notation, field width, precision and fill character
\param buffer Preallocated string (has to be large enough to hold float representation)
\param val Float value
\param precision Precision
\param width Field width
\param padding Fill character
\return String (buffer)

\fn char* string_from_time_buffer( char* buffer, uint64_t time )
\brief Convert timestamp into buffer
\details Convert a timestamp into a preallocated string
\param buffer Preallocated string (has to be large enough to hold time representation)
\param time Timestamp
\return String (buffer)

\fn char* string_from_uuid_buffer( char* buffer, const uuid_t uuid )
\brief Convert UUID into buffer
\details Convert an UUID into a preallocated string
\param buffer Preallocated string (has to be large enough to hold time representation)
\param uuid UUID
\return String (buffer)

\fn char* string_from_version_buffer( char* buffer, const version_t version )
\brief Convert version into buffer
\details Convert a version identifier into a preallocated string
\param buffer Preallocated string (has to be large enough to hold version representation)
\param version Version
\return String

\fn const char* string_from_int_static( int64_t val, unsigned int width, char padding )
\brief Convert int into static buffer
\details Convert an integer into a thread-local conversion buffer, with optional field width and fill character.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param val Integer value
\param width Field width
\param padding Fill character
\return String (thread-local buffer)

\fn const char* string_from_uint_static( uint64_t val, bool hex, unsigned int width, char padding )
\brief Convert unsigned int into static buffer
\details Convert an unsigned integer into a thread-local conversion buffer, with optional hexadecimal base and base prefix, field width and fill character.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param val Integer value
\param hex Hexadecimal flag
\param width Field width
\param padding Fill character
\return String (thread-local buffer)

\fn const char* string_from_uint128_static( const uint128_t val )
\brief Convert 128-bit unsigned int into static buffer
\details Convert an 128-bit unsigned integer into a thread-local conversion buffer.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param val Integer value
\return String (thread-local buffer)

\fn const char* string_from_real_static( real val, unsigned int precision, unsigned int width, char padding )
\brief Convert float into static buffer
\details Convert a float into a thread-local conversion buffer, with optional fixed notation, field width, precision and fill character.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param val Float value
\param precision Precision
\param width Field width
\param padding Fill character
\return String (thread-local buffer)

\fn const char* string_from_time_static( uint64_t time )
\brief Convert timestamp into static buffer
\details Convert a timestamp into a thread-local conversion buffer.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param time Timestamp
\return String (thread-local buffer)

\fn const char* string_from_uuid_static( const uuid_t uuid )
\brief Convert UUID into static buffer
\details Convert an UUID into a thread-local conversion buffer.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param uuid UUID
\return String (thread-local buffer)

\fn const char* string_from_version_static( const version_t version )
\brief Convert version into static buffer
\details Convert a version identifier into a thread-local conversion buffer.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param version Version
\return String (thread-local buffer)

\fn int string_to_int( const char* val )
\brief Convert to int
\details Convert a string to a signed integer
\param val String
\return Integer value

\fn unsigned int string_to_uint( const char* val, bool hex )
\brief Convert string to unsigned int
\details Convert a string to an unsigned integer
\param val String
\param hex Hexadecimal flag
\return Unsigned integer value

\fn int64_t string_to_int64( const char* val )
\brief Convert to 64-bit int
\details Convert a string to a signed 64-bit integer
\param val String
\return 64-bit integer value

\fn uint64_t string_to_uint64( const char* val, bool hex )
\brief Convert to 64-bit unsigned int
\details Convert a string to an unsigned 64-bit integer
\param val String
\param hex Hexadecimal flag
\return 64-bit unsigned integer value

\fn uint128_t string_to_uint128( const char* val )
\brief Convert to 128-bit unsigned int
\details Convert a string to an unsigned 128-bit integer
\param val String
\return 128-bit integer value

\fn real string_to_real( const char* val )
\brief Convert to float
\details Convert a string to a float
\param val String
\return Floating point value

\fn uuid_t string_to_uuid( const char* val )
\brief Convert to UUID
\details Convert a string to a uuid
\param val String
\return UUID

\fn version_t string_to_version( const char* val )
\brief Convert to version
\details Convert a string to a version identifier
\param val String
\return Version identifier

\fn bool string_is_valid_email_address( const char* address )
\brief Query if valid email address
\details Validate email address format (basic tests)
\param address Email address string
\return true if valid email address, false if not

\def STRING_NPOS
\brief Invalid string position (-1)
\details Denotes an invalid string position (-1)

\def STRING_WHITESPACE
\brief Default whitespace characters
\details Default whitespace characters

\def WSTRING_WHITESPACE
\brief Default whitespace wide characters
\details Default whitespace wide characters

*/
