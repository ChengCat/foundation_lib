
\fn char* string_strip_substr( char* str, const char* delimiters, unsigned int length )
\brief Strip substring
\details Strip a substring (in-place) of given characters at start end end of the given sub-string.
Modifies the passed string (starting at str and ending at str+length)
and returns a new pointer to it. If null is passed as string to strip, a new empty string is returned.
\param str String to strip
\param delimiters Characters to strip
\param length Length of substring to strip
\return Stipped string

\fn char* string_prepend( char* str, const char* prefix )
\brief Prepend prefix
\details Prepend a prefix to a string. Will reallocate the given string so
use the returned pointer as a replacement for the passed string.
\param str Base string
\param prefix Prefix string
\return New string which is base string with prefix string prepended (prefix+base)

\fn void string_split( const char* str, const char* separators, char** left, char** right, bool allowempty )
\brief Split string
\details Split a string into two strings along the first occurrence of any of the given separator characters.
The entire group of separators following the initial occurrence will be removed in the split. For example,
splitting "this is insidious" with separators "is " will yield resulting strings "th" and "nsidious".
Unless null the left and right string pointers will be set to newly allocated strings. The allowempty flag
controls if an empty left part is allowed. If not, any leading separator characters will first be
discarded before processing split.
\param str Source string
\param separators Separator characters
\param left Pointer to string pointer which will receive new left part of split result.
\param right Pointer to string pointer which will receive new right part of split result
\param allowempty Empty flag


\fn unsigned int string_find( const char* str, char c, unsigned int offset )
\brief Find character
\details Search for a character in a string from the given offset
\param str Source string
\param c Character to search for
\param offset Start offset of search within source string
\return Offset of first occurrence of c within str (greater or equal to offset). STRING_NPOS if not found

\fn unsigned int string_find_string( const char* str, const char* key, unsigned int offset )
\brief Find string
\details Search for a key string in a string from the given offset
\param str Source string
\param key Key string to search for
\param offset Start offset of search within source string
\return Offset of first occurrence of key string within str (greater or equal to offset). STRING_NPOS if not found

\fn unsigned int string_rfind( const char* str, char c, unsigned int offset )
\brief Reverse find character
\details Reverse search for a character in a string from the given offset
\param str Source string
\param c Character to search for
\param offset Start offset of search within source string. Pass STRING_NPOS to search from end.
\return Offset of first occurrence of c within str (less or equal to offset). STRING_NPOS if not found

\fn unsigned int string_rfind_string( const char* str, const char* key, unsigned int offset )
\brief Reverse find string
\details Reverse search for a key string in a string from the given offset
\param str Source string
\param key Key string to search for
\param offset Start offset of search within source string. Pass STRING_NPOS to search from end.
\return Offset of first occurrence of key string within str (less or equal to offset). STRING_NPOS if not found

\fn unsigned int string_find_first_of( const char* str, const char* key, unsigned int offset )
\brief Find first occurrence
\details Search for the first occurrence of any character in key string in a string from the given offset
\param str Source string
\param key Key characters to search for
\param offset Start offset of search within source string
\return Offset of first occurrence of any of the characters in the key string within str (greater or equal to offset). STRING_NPOS if none found

\fn unsigned int string_find_last_of( const char* str, const char* key, unsigned int offset )
\brief Find last occurrence
\details Search for the last occurrence of any character in key string in a string from the given offset
\param str Source string
\param key Key characters to search for
\param offset Start offset of search within source string
\return Offset of last occurrence of any of the characters in the key string within str (greater or equal to offset). STRING_NPOS if none found

\fn unsigned int string_find_first_not_of( const char* str, const char* key, unsigned int offset )
\brief Find first inverse occurrence
\details Search for the first occurrence of any character not present in key string in a string from the given offset
\param str Source string
\param key Key characters to invert search for
\param offset Start offset of search within source string
\return Offset of first occurrence of any character which is not part of the key string within str (greater or equal to offset). STRING_NPOS if none found

\fn unsigned int string_find_last_not_of( const char* str, const char* key, unsigned int offset )
\brief Find last inverse occurrence
\details Search for the last occurrence of any character not present in key string in a string from the given offset
\param str Source string
\param key Key characters to invert search for
\param offset Start offset of search within source string
\return Offset of last occurrence of any character which is not part of the key string within str (greater or equal to offset). STRING_NPOS if none found

\fn bool string_ends_with( const char* str, const char* suffix )
\brief Query if end suffix
\details Query if string ends with the given suffix
\param str String
\param suffix Suffix
\return True if string ends with the given suffix, false if not

\fn bool string_equal( const char* lhs, const char* rhs )
\brief Query if equal
\details Query if strings are equal (case sensitive)
\param lhs First string
\param rhs Second string
\return True if equal, false if not

\fn bool string_equal_substr( const char* lhs, const char* rhs, unsigned int length )
\brief Query if substring equal
\details Query if substrings are equal (case sensitive)
\param lhs First string
\param rhs Second string
\param length Substring length to compare
\return True if substrings are equal in [0,length) range, false if not

\fn bool string_match_pattern( const char* element, const char* pattern )
\brief Query if pattern match
\details Check if a string matches a given pattern using ? and * wildcards. For regular expression matching see
the regex.h module.
\param element String
\param pattern Pattern with ? and * wildcards
\return true if string matches given pattern, false if not

\fn char** string_explode( const char* str, const char* delimiters, bool allow_empty )
\brief Explode into substrings
\details Explode a string into substrings along given separator characters, optinally ignoring or
including empty substrings (consecutive separator characters).
\param str Source string
\param delimiters Separator characters
\param allow_empty Flag to include empty substrings if true, ignore if false
\return Array of new allocated substrings

\fn char* string_merge( const char* const* array, unsigned int array_size, const char* delimiter )
\brief Merge string array
\details Merge a string array using the given separator string
\param array Source string array
\param array_size Number of string in array to use in merge
\param delimiter Separator string to add between all source strings
\return New merged string

\fn uint32_t string_glyph( const char* str, unsigned int offset, unsigned int* consumed )
\brief Get unicode glyph
\details Get unicode glyph represented by the utf-8 enconding in the source string at the given offset, optionally
also reporting the number of consumed 8-bit characters in the process.
\param str utf-8 encoded string string
\param offset Offset in source string
\param consumed Optional pointer to an unsigned int receiving the number of consumed 8-bit characters used in constructing the unicode glyph
\return Unicode glyph constructed

\fn int string_array_find( const char* const* haystack, const char* needle, unsigned int haystack_size )
\brief Find string in array
\details Find a specific string in an array of strings
\param haystack Array of strings to check
\param needle String to find
\param haystack_size Size of array size
\return Index of string found, or -1 if no string matching

\fn void string_array_deallocate_elements( char** array )
\brief Deallocate strings in array
\details Deallocate all strings in an array of strings. Does not deallocate array itself.
\param array Array of strings

\def string_array_deallocate( array )
\brief Deallocate array and strings in array
\details Deallocate all strings in an array and deallocate array itself. Array
will be reset to null.
\param array Array of strings

\fn wchar_t* wstring_allocate_from_string( const char* cstr, unsigned int length )
\brief Allocate wide string
\details Allocate a wide char string from utf-8 encoded string
\param cstr utf-8 encoded string
\param length Length of utf-8 encoded string in bytes (NOT unicode glyphs)
\return Wide char string

\fn void wstring_from_string( wchar_t* str, const char* cstr, unsigned int max_length )
\brief Convert to wide string
\details Convert a utf-8 encoded string into a preallocated wide char string
\param str Destination wide-char string
\param cstr Source utf-8 encoded string
\param max_length Maximum number of wide characters to store in destination string, including null terminator

\fn void wstring_deallocate( wchar_t* str )
\brief Deallocate wide string
\details Deallocate a wide character string
\param str String

\fn unsigned int wstring_length( const wchar_t* str )
\brief Get length of wide string
\details Get length of a wide character string
\param str Wide character string
\return Length in number of wide characters (not bytes)

\fn bool wstring_equal( const wchar_t* lhs, const wchar_t* rhs )
\brief QUery if wide strings equal
\details Compare wide character strings, case sensitive
\param lhs First string
\param rhs Second string
\return true if strings are equal, false if not

\fn char* string_allocate_from_wstring( const wchar_t* str, unsigned int length )
\brief Allocate string from wide string
\details Allocate a new utf-8 string representing the given wide character string
\param str Wide character string
\param length Length of wide character string in number of wide characters (not bytes)
\return New utf-8 encoded string

\fn char* string_allocate_from_utf16( const uint16_t* str, unsigned int length )
\brief Allocate string from utf-16 string
\details Allocate a new utf-8 string representing the given utf-16 encoded string
\param str utf-16 encoded string
\param length Length of utf-16 string in number of 16-bit characters (not bytes)
\return New utf-8 encoded string

\fn char* string_allocate_from_utf32( const uint32_t* str, unsigned int length )
\brief Allocate string from utf-32 string
\details Allocate a new utf-8 string representing the given utf-32 encoded string
\param str utf-32 encoded string
\param length Length of utf-32 string in number of 32.bit characters (not bytes)
\return New utf-8 encoded string

\fn void string_convert_utf16( char* dst, const uint16_t* src, unsigned int dstsize, unsigned int srclength )
\brief Convert from utf-16 string
\details Convert an utf-16 string into a preallocated utf-8 string
\param dst Destination utf-8 string
\param src Source utf-16 string
\param dstsize Maximum number of utf-8 characters to store in destination, including terminating zero
\param srclength Length of source string in utf-16 characters (not bytes), not including terminating zero

\fn void string_convert_utf32( char* dst, const uint32_t* src, unsigned int dstsize, unsigned int srclength )
\brief Convert from utf-32 string
\details Convert an utf-32 string into a preallocated utf-8 string
\param dst Destination utf-8 string
\param src Source utf-32 string
\param dstsize Maximum number of utf-8 characters to store in destination, including terminating zero
\param srclength Length of source string in utf-32 characters (not bytes), not including terminating zero

\fn char* string_from_int( int64_t val, unsigned int width, char padding )
\brief Convert from int
\details Convert an integer to a string, with optional field width and fill character
\param val Integer value
\param width Field width
\param padding Fill character
\return New string

\fn char* string_from_uint( uint64_t val, bool hex, unsigned int width, char padding )
\brief Convert from unsigned int
\details Convert an unsigned integer to a string, with optional hexadecimal base and base prefix, field width and fill character
\param val Integer value
\param hex Hexadecimal flag
\param width Field width
\param padding Fill character
\return New string

\fn char* string_from_uint128( const uint128_t val )
\brief Convert from 128-bit unsigned int
\details Convert an 128-bit unsigned integer to a string
\param val Integer value
\return New string

\fn char* string_from_real( real val, unsigned int precision, unsigned int width, char padding )
\brief Convert from float
\details Convert a float to a string, with optional fixed notation, field width, precision and fill character
\param val Float value
\param precision Precision
\param width Field width
\param padding Fill character
\return New string

\fn char* string_from_time( uint64_t time )
\brief Convert from timestamp
\details Get a formatted string of the given timestamp
\param time Timestamp
\return New string

\fn char* string_from_uuid( const uuid_t uuid )
\brief Convert from UUID
\details Get a formatted string of the given UUID
\param uuid UUID
\return New string

\fn char* string_from_version( const version_t version )
\brief Convert from version
\details Get a formatted string of the given version
\param version Version
\return New string

\fn char* string_from_int_buffer( char* buffer, int64_t val, unsigned int width, char padding )
\brief Convert int into buffer
\details Convert an integer into a preallocated string, with optional field width and fill character
\param buffer Preallocated string (has to be large enough to hold integer representation)
\param val Integer value
\param width Field width
\param padding Fill character
\return String

\fn char* string_from_uint_buffer( char* buffer, uint64_t val, bool hex, unsigned int width, char padding )
\brief Convert unsigned int into buffer
\details Convert an unsigned integer into a preallocated string, with optional hexadecimal base and base prefix, field width and fill character
\param buffer Preallocated string (has to be large enough to hold integer representation)
\param val Integer value
\param hex Hexadecimal flag
\param width Field width
\param padding Fill character
\return String (buffer)

\fn char* string_from_uint128_buffer( char* buffer, const uint128_t val )
\brief Convert 128-bit unsigned int into buffer
\details Convert an 128-bit unsigned integer into a preallocated string
\param buffer Preallocated string (has to be large enough to hold integer representation)
\param val Integer value
\return String (buffer)

\fn char* string_from_real_buffer( char* buffer, real val, unsigned int precision, unsigned int width, char padding )
\brief Convert float into buffer
\details Convert a float into a preallocated string, with optional fixed notation, field width, precision and fill character
\param buffer Preallocated string (has to be large enough to hold float representation)
\param val Float value
\param precision Precision
\param width Field width
\param padding Fill character
\return String (buffer)

\fn char* string_from_time_buffer( char* buffer, uint64_t time )
\brief Convert timestamp into buffer
\details Convert a timestamp into a preallocated string
\param buffer Preallocated string (has to be large enough to hold time representation)
\param time Timestamp
\return String (buffer)

\fn char* string_from_uuid_buffer( char* buffer, const uuid_t uuid )
\brief Convert UUID into buffer
\details Convert an UUID into a preallocated string
\param buffer Preallocated string (has to be large enough to hold time representation)
\param uuid UUID
\return String (buffer)

\fn char* string_from_version_buffer( char* buffer, const version_t version )
\brief Convert version into buffer
\details Convert a version identifier into a preallocated string
\param buffer Preallocated string (has to be large enough to hold version representation)
\param version Version
\return String

\fn const char* string_from_int_static( int64_t val, unsigned int width, char padding )
\brief Convert int into static buffer
\details Convert an integer into a thread-local conversion buffer, with optional field width and fill character.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param val Integer value
\param width Field width
\param padding Fill character
\return String (thread-local buffer)

\fn const char* string_from_uint_static( uint64_t val, bool hex, unsigned int width, char padding )
\brief Convert unsigned int into static buffer
\details Convert an unsigned integer into a thread-local conversion buffer, with optional hexadecimal base and base prefix, field width and fill character.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param val Integer value
\param hex Hexadecimal flag
\param width Field width
\param padding Fill character
\return String (thread-local buffer)

\fn const char* string_from_uint128_static( const uint128_t val )
\brief Convert 128-bit unsigned int into static buffer
\details Convert an 128-bit unsigned integer into a thread-local conversion buffer.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param val Integer value
\return String (thread-local buffer)

\fn const char* string_from_real_static( real val, unsigned int precision, unsigned int width, char padding )
\brief Convert float into static buffer
\details Convert a float into a thread-local conversion buffer, with optional fixed notation, field width, precision and fill character.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param val Float value
\param precision Precision
\param width Field width
\param padding Fill character
\return String (thread-local buffer)

\fn const char* string_from_time_static( uint64_t time )
\brief Convert timestamp into static buffer
\details Convert a timestamp into a thread-local conversion buffer.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param time Timestamp
\return String (thread-local buffer)

\fn const char* string_from_uuid_static( const uuid_t uuid )
\brief Convert UUID into static buffer
\details Convert an UUID into a thread-local conversion buffer.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param uuid UUID
\return String (thread-local buffer)

\fn const char* string_from_version_static( const version_t version )
\brief Convert version into static buffer
\details Convert a version identifier into a thread-local conversion buffer.
The buffer is shared between all string_from_*_static functions and only valid until next call to one
of these functions.
\param version Version
\return String (thread-local buffer)

\fn int string_to_int( const char* val )
\brief Convert to int
\details Convert a string to a signed integer
\param val String
\return Integer value

\fn unsigned int string_to_uint( const char* val, bool hex )
\brief Convert string to unsigned int
\details Convert a string to an unsigned integer
\param val String
\param hex Hexadecimal flag
\return Unsigned integer value

\fn int64_t string_to_int64( const char* val )
\brief Convert to 64-bit int
\details Convert a string to a signed 64-bit integer
\param val String
\return 64-bit integer value

\fn uint64_t string_to_uint64( const char* val, bool hex )
\brief Convert to 64-bit unsigned int
\details Convert a string to an unsigned 64-bit integer
\param val String
\param hex Hexadecimal flag
\return 64-bit unsigned integer value

\fn uint128_t string_to_uint128( const char* val )
\brief Convert to 128-bit unsigned int
\details Convert a string to an unsigned 128-bit integer
\param val String
\return 128-bit integer value

\fn real string_to_real( const char* val )
\brief Convert to float
\details Convert a string to a float
\param val String
\return Floating point value

\fn uuid_t string_to_uuid( const char* val )
\brief Convert to UUID
\details Convert a string to a uuid
\param val String
\return UUID

\fn version_t string_to_version( const char* val )
\brief Convert to version
\details Convert a string to a version identifier
\param val String
\return Version identifier

\fn bool string_is_valid_email_address( const char* address )
\brief Query if valid email address
\details Validate email address format (basic tests)
\param address Email address string
\return true if valid email address, false if not

\def STRING_NPOS
\brief Invalid string position (-1)
\details Denotes an invalid string position (-1)

\def STRING_WHITESPACE
\brief Default whitespace characters
\details Default whitespace characters

\def WSTRING_WHITESPACE
\brief Default whitespace wide characters
\details Default whitespace wide characters

*/
