
/*!

\file profile.h
\brief Profiling API
\details Profiling API collecting function level profiling data. Available if #BUILD_ENABLE_PROFILE
is set, otherwise all profiling function calls will evaluate to void and not generate any code.


\fn void profile_initialize( const char* identifier, void* buffer, uint64_t size )
\brief Initialize profiling
\details Initialize profiling module. The string passed to the function must be
constant over the execution of the application (until profile_shutdown() is called)
and should identify the application/build/machine or whatever you want it to identify.
Memory buffer should be large enough to hold data for ~100ms to avoid excessive
calls to output flush function. The profile subsystem will not allocate any memory,
it only uses the passed in work buffer. Recommended size is at least 256KiB.
Maximum usable size is 4MiB, since the profiling system can only use 65k blocks of 64 bytes each.
\param identifier Application identifier
\param buffer Work temporary buffer
\param size Size of work buffer

\fn void profile_shutdown( void )
\brief Shutdown profiling
\details Shutdown profiling module and free resources. Will call the writer callback
with a null pointer and zero size to indicate end of transmission.

\fn void profile_enable( bool enable )
\brief Control profiling
\details Control profiling operation. A true argument enables all profiling calls,
a false disables all calls.
\param enable Enable flag

\fn void profile_set_output( profile_write_fn writer )
\brief Set output function
\details Set output function. The function will be called with blocks of data
to write to whatever output stream you want.
\param writer New writer function

\fn void profile_set_output_wait( int ms )
\brief Control output rate
\details Control profile output rate by setting time between flushes in milliseconds.
Default is 100ms. Increase rate when passing a smaller buffer to initialization,
decrease rate if passing a larger buffer.
\param ms Wait time in milliseconds

\fn void profile_end_frame( uint64_t counter )
\brief End frame
\details End a frame. Inserts a token into the profiling stream that identifies the end
of a frame, effectively grouping profile information together in a block.
\param counter Frame counter

\fn void profile_begin_block( const char* message )
\brief Begin block
\details Begin a named profile timing block. The string passed to this function must
be constant until the block is written to the output stream. Every call to
#profile_begin_block must be matched with a call to #profile_end_block
\param message Block message (name)

\fn void profile_update_block( void )
\brief Update block
\details Update the current active block. Call this function regularly for blocks
running for a prolonged time.

\fn void profile_end_block( void )
\brief End block
\details End the current active block

\fn void profile_log( const char* message )
\brief Insert log message
\details Insert log message. The string passed to this function must
be constant until the block is written to the output stream.
\param message Message to insert into the profile stream

\fn void profile_trylock( const char* name )
\brief Lock notification
\details Lock notification. Call this method right before the thread tries
to acquire a lock on a mutually exclusive resource. The string passed to this function must
be constant until the block is written to the output stream.
\param name Lock name

\fn void profile_lock( const char* name )
\brief Lock notification
\details Lock notification. Call this method right after the thread has
acquired a lock on a mutually exclusive resource. The string passed to this function must
be constant until the block is written to the output stream.
\param name Lock name

\fn void profile_unlock( const char* name )
\brief Lock notification
\details Lock notification. Call this method right after the thread has
released a lock on a mutually exclusive resource. The string passed to this function must
be constant until the block is written to the output stream.
\param name Lock name

\fn void profile_wait( const char* name )
\brief Wait notification
\details Wait notification. Call this method right before the thread enters a wait state
on a mutually exclusive resource. The string passed to this function must
be constant until the block is written to the output stream.
\param name  Lock name

\fn void profile_signal( const char* name )
\brief Signal notification
\details Signal notification. Call this method right before the thread signals state
on a mutually exclusive resource. The string passed to this function must
be constant until the block is written to the output stream.
\param name Lock name

*/
