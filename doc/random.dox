
/*!

\file random.h
\brief Pseudorandom number generator
\details Pseudorandom number generator. The generator is thread-safe and lock-free, except for the
thread init/shutdown sequences which will use a mutex to synchronize threads. Memory
allocated for thread-local state buffers will be reused by new threads once an old
thread has exited and released ownership of such buffers.


\fn uint32_t random32( void )
\brief Generate 32 bit random number
\details Generate 32 bit random number in full [0,2^32) range
\return 32-bit pseudorandom number in [0,2^32) range

\fn uint32_t random32_range( uint32_t low, uint32_t high )
\brief Generate 32 bit random number
\details Generate 32 bit random number in [low,high) range.
\param low Lower limit of range
\param high Upper limit of range
\return 32-bit pseudorandom number in [low,high) range

\fn uint64_t random64( void )
\brief Generate 64 bit random number
\details Generate 64 bit random number in full [0,2^64) range.
\return 64-bit pseudorandom number in [0,2^64) range

\fn uint64_t random64_range( uint64_t low, uint64_t high )
\brief Generate 64 bit random number
\details Generate 64 bit random number in [low,high) range.
\param low Lower limit of range
\param high Upper limit of range
\return 64-bit pseudorandom number in [low,high) range

\fn real random_normalized( void )
\brief Generate normalized floating point random number
\details Generate normalized floating point random number with maximum of 54bits of precision in [0,1) range.
\return Floating point pseudorandom number with maximum of 54bits of precision in [0,1) range

\fn real random_range( real low, real high )
\brief Generate floating point random number
\details Generate floating point random number in [low,high) range.
\param low Lower limit of range
\param high Upper limit of range
\return Floating point pseudorandom number in [low,high) range

\fn int32_t random32_gaussian_range( int32_t low, int32_t high )
\brief Generate 32 bit normal distribution random number
\details Generate 32 bit normal distribution random number in the [low, high) range.
\param low Lower limit of range
\param high Upper limit of range
\return 32-bit pseudorandom approximation to a normal distribution in the [low, high) range

\fn real random_gaussian_range( real low, real high )
\brief Generate floating point normal distribution random number
\details Generate floating point normal distribution random number in the [low, high) range.
\param low Lower limit of range
\param high Upper limit of range
\return Floating point value with an approximated normal distribution in the [low, high) range

\fn int32_t random32_triangle_range( int32_t low, int32_t high )
\brief Generate 32 bit triangular distribution random number
\details Generate 32 bit triangular distribution random number in the [low, high) range.
\param low Lower limit of range
\param high Upper limit of range
\return 32-bit triangular distribution in the [low, high) range.

\fn real random_triangle_range( real low, real high )
\brief Generate floating point triangular distribution random number
\details Generate floating point triangular distribution random number in the [low, high) range.
\param low Lower limit of range
\param high Upper limit of range
\return Floating point value with a triangular distribution in the [low, high) range

\fn uint32_t random32_weighted( uint32_t limit, const real* weights )
\brief Generate 32 bit weighted random number
\details Generate a weighted random number in the [0,limit) range, with probabilities
equal to the relative weights (probability = weight/total_weight_sum). The weights
array must have "limit" number of elements.
\param limit Upper limit of range
\param weights Array of weights, must have at least limit number of elements
\return 32-bit weighted pseudorandom number in [0,limit) range

\fn void random_thread_deallocate( void )
\brief Free thread memory
\details Free thread memory used by pseudorandom number generator. Will be called automatically
on thread exit for foundation threads.

*/
