
/*!

\file assert.h
\brief Extended assert macros
\details Extended assert macros and callback handling. Assert enabling/disabling is controlled by build settings
in build.h, where disabling asserts will replace the code with a null or static statement (depending on
the type of assert).


\fn assert_handler
\brief Get the currently set global assert handler
\details Get the currently set global assert handler
\return Assert handler

\fn assert_set_handler
\brief Set global assert handlder
Set the current global assert handler. This will be called for each
triggered assert and thus needs to be thread safe. Set to null to
disable assert callbacks and use the default behaviour.
\param new_handler              New global assert handler
\see assert_report

\fn assert_report
\brief Report assert
\details Report assert to the global assert handler. If the global assert handler is set
to null use the default behaviour, which is to print the assert report
to the log (error level) and popup a system message box for UI applications.
\param context Log context
\param condition Assert condition expression
\param file Source file triggering assert
\param line Line number triggering assert
\param msg Assert information message
\return 1 if assert was not handled and execution should break, 0 if assert handled and execution can continue

\fn assert_report_formatted
\brief Report assert
\details Report assert with a formatted message. Will call assert_report with the final formatted message.
\see assert_report
\param context Log context
\param condition Assert condition expression
\param file Source file triggering assert
\param line Line number triggering assert
\param msg Assert information message format specifier
\return 1 if assert was not handled and execution should break, 0 if assert handled and execution can continue

\def FOUNDATION_ASSERT
\brief Base assert
\details Assert the given condition. If assert fails, call the assert report callback without a message and optionally
(depending on callback) cause a breakpoint (FOUNDATION_BREAKPOINT).
\param cond Assert condition

\def FOUNDATION_ASSERT_MSG
\brief Base assert with message
\details Assert the given condition. If assert fails, call the assert report callback with the given message and optionally
(depending on callback) cause a breakpoint (FOUNDATION_BREAKPOINT).
\param cond Assert condition
\param msg Assert message

\def FOUNDATION_ASSERT_MSGFORMAT
\brief Base assert with formatted message
\details Assert the given condition. If assert fails, call the assert report callback with the given formatted message and
optionally (depending on callback) cause a breakpoint (FOUNDATION_BREAKPOINT).
\param cond Assert condition
\param msg Assert message format specifier

\def FOUNDATION_ASSERT_FAIL
\brief Statically failed assert
\details Statically fail assert, call the assert report callback with the given message and optionally (depending on callback)
cause a breakpoint (FOUNDATION_BREAKPOINT).
\param msg Assert message

\def FOUNDATION_ASSERT_FAIL_LOG
\brief Statically failed assert with log fallback
\details Statically fail assert, call the assert report callback with the given message and optionally (depending on callback)
cause a breakpoint (FOUNDATION_BREAKPOINT). If asserts are not enabled in build config the message will be logged
as an error in the given log context.
\param context Log context
\param msg Assert and log message

\def FOUNDATION_ASSERT_FAILFORMAT
\brief Statically failed assert
\details Statically fail assert, call the assert report callback with the given formatted message and optionally
(depending on callback) cause a breakpoint (FOUNDATION_BREAKPOINT).
\param msg Assert message format specifier

\def FOUNDATION_ASSERT_FAILFORMAT_LOG
\brief Statically failed assert with log fallback
\details Statically fail assert, call the assert report callback with the given formatted message and optionally
(depending on callback) cause a breakpoint (FOUNDATION_BREAKPOINT). If asserts are not enabled in build config
the formatted message will be logged as an error in the given log context.
\param context Log context
\param msg Assert and log message format specifier

\def FOUNDATION_ASSERT_ALIGNMENT
\brief Assert memory alignment
\details Assert that the given memory address has the given alignment
\param addr Memory address
\param alignment Alignment requirement

\def FOUNDATION_ASSERT_PLATFORM_ALIGNMENT
\brief Assert memory alignment
\details Assert that the given memory address has the given alignment if the platform requires specific alignments
for some data types
\param addr Memory address
\param alignment Alignment requirement

\def FOUNDATION_VALIDATE
\brief Assert condition with evaluated boolean value
\details Assert the given condition. If assert fails, call the assert report callback without a message and optionally
(depending on callback) cause a breakpoint (FOUNDATION_BREAKPOINT). The value of the validate expression will
be true if condition is true and false if the condition fails, even if asserts are disabled in the build config.
This allows constructs such as <code>if( !FOUNDATION_VALIDATE( condition ) ) return;</code> to remain safe and properly
evaluated even when asserts are statically disabled.
\param cond Assert condition

\def FOUNDATION_VALIDATE_MSG
\brief Assert condition with message and evaluated boolean value
\details Assert the given condition. If assert fails, call the assert report callback with the given message and optionally
(depending on callback) cause a breakpoint (FOUNDATION_BREAKPOINT). The value of the validate expression will be
true if condition is true and false if the condition fails, even if asserts are disabled in the build config.
This allows constructs such as <code>if( !FOUNDATION_VALIDATE_MSG( condition, "message" ) ) return;</code> to
remain safe and properly evaluated even when asserts are statically disabled.
\param cond Assert condition
\param msg Assert message

\def FOUNDATION_VALIDATE_MSGFORMAT
\brief Assert condition with formatted message and evaluated boolean value
\details Assert the given condition. If assert fails, call the assert report callback with the given formatted message
and optionally (depending on callback) cause a breakpoint (FOUNDATION_BREAKPOINT). The value of the validate
expression will be true if condition is true and false if the condition fails, even if asserts are disabled
in the build config. This allows constructs such as
<code>if( !FOUNDATION_VALIDATE_MSGFORMAT( condition, "%s", message ) ) return;</code> to remain safe and
properly evaluated even when asserts are statically disabled.
\param cond Assert condition
\param msg Assert message format specifier

\def FOUNDATION_STATIC_ASSERT
\brief Static assert
\details Static assert evaluated at compile time
\param cond Assert condition
\param msg Assert "message" identifier which should be unquoted on the form <code>some_kind_of_message</code>

*/
