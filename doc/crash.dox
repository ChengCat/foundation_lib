
/*!

\file crash.h
\brief Crash guards and dump utilities
\details Crash guards and dump utilities


\fn int crash_guard( crash_guard_fn fn, void* data, crash_dump_callback_fn callback, const char* name )
\brief Crash/exception guard
\details Guard the given method and generate a crash dump if the function generates
an abnormal program termination.
\param fn                              Function to wrap
\param data                            Argument
\param callback                        Function to call on crash dump
\param name                            Dump name prefix
\return                                Function return value, FOUNDATION_CRASH_DUMP_GENERATED if dump was generated

\fn void crash_guard_set( crash_dump_callback_fn callback, const char* name )
\brief Set global crash guard callback
\details Set the global crash guard callback and dump name prefix. This will be used for all new threads created.
\param callback                        Function to call on crash dump
\param name                            Dump name prefix

\fn const char* crash_guard_name( void )
\brief Get current global dump name prefix
\details Get current global dump name prefix
\return                                Dump name prefix

\fn crash_dump_callback_fn crash_guard_callback( void )
\brief Get current global crash dump callback
\details Get current global crash dump callback
\return                                Crash dump callback

\fn void crash_debug_break( void )
\brief Generate debug breakpoint
\details Generate a debug break that will be caught by any attached debugger

\fn void crash_dump( void )
\brief Generate core dump
\details Cause a core dump (illegal instruction) that will hard crash the process

*/
