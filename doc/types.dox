/*!

\file types.h
\brief Foundation data types
\details Foundation data types, enumerations and typedefs. Provides platform abstractions of system
specific data types and provides the base language used in all libraries built on this foundation library.


\enum error_level_t
\brief Error severity level
\details Error severity level. The higher the value, the more severe the error. Error level 0
(ERRORLEVEL_NONE) is used to indicate no error
\internal Do not change order! \endinternal

\var error_level_t ERRORLEVEL_NONE
No error

\var error_level_t ERRORLEVEL_DEBUG
Debug level, usually ignored in anything except debug builds. Execution will continue as expected.

\var error_level_t ERRORLEVEL_INFO
Information level, contains generally useful information. Execution will continue as expected.

\var error_level_t ERRORLEVEL_WARNING
Warning level, contains important information. Operation failed, but execution can continue.

\var error_level_t ERRORLEVEL_ERROR
Error level, contains vital information. Operation failed and execution might be affected.

\var error_level_t ERRORLEVEL_PANIC
Panic level, contains vital information. Operation failed and execution cannot continue.


\enum error_t
\brief Error identifiers
\details Error identifiers. Error 0 (ERROR_NONE) is used to indicate no error.
\internal Do not change order, only append! \endinternal

\var error_t ERROR_NONE
No error

\var error_t ERROR_INVALID_VALUE
An invalid value was passed to the function

\var error_t ERROR_UNSUPPORTED
The function is unsupported on the current system

\var error_t ERROR_NOT_IMPLEMENTED
The function is not yet implemented

\var error_t ERROR_OUT_OF_MEMORY
The function could not allocate the needed memory and/or resources

\var error_t ERROR_MEMORY_LEAK
A memory leak was detected

\var error_t ERROR_MEMORY_ALIGNMENT
Memory alignment check failed

\var error_t ERROR_INTERNAL_FAILURE
Internal failed, unspecified. The function encountered a state it did not expect or support

\var error_t ERROR_ACCESS_DENIED
The function call was not allowed

\var error_t ERROR_EXCEPTION
An exception was thrown

\var error_t ERROR_SYSTEM_CALL_FAIL
A system call failed

\var error_t ERROR_UNKNOWN_TYPE
The function encountered an unsupported data type for the requested operation

\var error_t ERROR_UNKNOWN_RESOURCE
The function could not resolve the resource to use in the requested operation

\var error_t ERROR_DEPRECATED
The function is deprecated and should not be used

\var error_t ERROR_ASSERT
An assert triggered

\var error_t ERROR_SCRIPT
A script generated an error

\var error_t ERROR_LAST_BUILTIN
Marker, last reserved internal error identifier


\enum warning_t
\brief Warning classes
\details Warning classes. Indicate which type/group of warning message that was generated
\internal Do not change order, only append! \endinternal

\var warning_t WARNING_PERFORMANCE
Performance warning

\var warning_t WARNING_DEPRECATED
Function is deprecated

\var warning_t WARNING_BAD_DATA
Bad data passed to/used in function

\var warning_t WARNING_MEMORY
Memory issues (running low, leaks, ...)

\var warning_t WARNING_UNSUPPORTED
Unsupported function

\var warning_t WARNING_SUSPICIOUS
General warning, function encountered a suspicious state

\var warning_t WARNING_SYSTEM_CALL_FAIL
System call failed

\var warning_t WARNING_DEADLOCK
Potential deadlock encountered

\var warning_t WARNING_SCRIPT
Script generated warning

\var warning_t WARNING_LAST_BUILTIN
Marker, last reserved inernal warning identifier


\enum memory_hint_t
\brief Memory hints
\details Memory hints. Enables the memory allocator to do better implementations of allocations
based on usage patterns for the requested memory.

\var memory_hint_t MEMORY_PERSISTENT
Memory is persistent (retained when function returns)

\var memory_hint_t MEMORY_TEMPORARY
Memory is temporary (extremely short lived and generally freed before function returns or scope ends)

\var memory_hint_t MEMORY_THREAD
Memory is local to the calling thread

\var memory_hint_t MEMORY_32BIT_ADDRESS
Memory should be allocated in low 32-bit address space

\var memory_hint_t MEMORY_ZERO_INITIALIZED
Memory should be initialized to zero during allocation


\enum platform_t
\brief Platform identifiers
\details Platform identifiers. For compile-time platform selection, use the FOUNDATION_PLATFORM_[...] preprocessor macros

\var platform_t PLATFORM_WINDOWS
Windows

\var platform_t PLATFORM_LINUX
Linux

\var platform_t PLATFORM_MACOSX
MacOS X

\var platform_t PLATFORM_IOS
iOS (iPhone, iPad)

\var platform_t PLATFORM_ANDROID
Android

\var platform_t PLATFORM_RASPBERRYPI
Raspberry Pi (linux flavour)

\var platform_t PLATFORM_PNACL
PNaCl


\enum architecture_t
\brief Architecture identifiers
\details Architecture identifiers for all architectures the engine supports. For compile-time selection of
architecture, use the <code>FOUNDATION_ARCH_[...]</code> preprocessor macros.

\var architecture_t ARCHITECTURE_X86
x86 (Classic 32-bit x86 compatible CPUs)

\var architecture_t ARCHITECTURE_X86_64
x86-64 (x86 with 64-bit extensions)

\var architecture_t ARCHITECTURE_PPC
PowerPC 32-bit

\var architecture_t ARCHITECTURE_PPC_64
PowerPC 64-bit

\var architecture_t ARCHITECTURE_ARM5
ARM 5

\var architecture_t ARCHITECTURE_ARM6
ARM 6

\var architecture_t ARCHITECTURE_ARM7
ARM 7

\var architecture_t ARCHITECTURE_ARM8
ARM 8

\var architecture_t ARCHITECTURE_ARM8_64
ARM 8 64-bit

\var architecture_t ARCHITECTURE_MIPS
MIPS

\var architecture_t ARCHITECTURE_MIPS_64
MIPS 64-bit

\var architecture_t ARCHITECTURE_GENERIC
Generic (for PNaCl)


\enum byteorder_t
\brief Machine byte order identifiers
\details Machine byte order identifiers

\var byteorder_t BYTEORDER_LITTLEENDIAN
Little endian

\var byteorder_t BYTEORDER_BIGENDIAN
Big endian


\enum application_flag_t
\brief Application flags
\details Application flags

\var application_flag_t APPLICATION_UTILITY
Application is a command line utility and should not have a normal windowing system interaction loop)

\var application_flag_t APPLICATION_DAEMON
Application is a daemon/service


\enum stream_mode_t
\brief Stream open modes
\details Open modes for streams. Not all streams can be opened with all modes.

\var stream_mode_t STREAM_IN
Readable

\var stream_mode_t STREAM_OUT
Writable

\var stream_mode_t STREAM_TRUNCATE
Truncate on open

\var stream_mode_t STREAM_ATEND
Position at end on open

\var stream_mode_t STREAM_BINARY
Read/write in binary mode

\var stream_mode_t STREAM_SYNC
Force sync on each write

\var stream_mode_t STREAM_CREATE
Create file if it does not exist


\enum stream_type_t
\brief Stream type identifiers
\details Stream type identifiers. Only lists built-in types, application specific types
can be added above the STREAMTYPE_LAST_RESERVED value.

\var stream_type_t STREAMTYPE_INVALID
Invalid identifier

\var stream_type_t STREAMTYPE_MEMORY
Memory buffer stream

\var stream_type_t STREAMTYPE_FILE
File system stream

\var stream_type_t STREAMTYPE_SOCKET
Socket stream

\var stream_type_t STREAMTYPE_RINGBUFFER
Ring buffer stream

\var stream_type_t STREAMTYPE_ASSET
Asset stream (Android)

\var stream_type_t STREAMTYPE_PIPE
Pipe stream

\var stream_type_t STREAMTYPE_STDSTREAM
Standard stream (stdin, stderr, stdout)

\var stream_type_t STREAMTYPE_LAST_RESERVED
Last reserved built-in stream type, not a real type.


\enum stream_seek_mode_t
\brief Stream seek directions
\details Stream seek directions

\var stream_seek_mode_t STREAM_SEEK_BEGIN
Seek from start of stream

\var stream_seek_mode_t STREAM_SEEK_CURRENT
Seek from current position of stream

\var stream_seek_mode_t STREAM_SEEK_END
Seek from end of stream


\enum thread_priority_t
\brief Thread priority
\details Thread priority

\var thread_priority_t THREAD_PRIORITY_LOW
Lowest possible priority

\var thread_priority_t THREAD_PRIORITY_BELOWNORMAL
Unimportant priority

\var thread_priority_t THREAD_PRIORITY_NORMAL
Normal priority

\var thread_priority_t THREAD_PRIORITY_ABOVENORMAL
Important priority

\var thread_priority_t THREAD_PRIORITY_HIGHEST
High priority

\var thread_priority_t THREAD_PRIORITY_TIMECRITICAL
Absolutely critical


\enum process_flag_t
\brief Process flags
\details Process flags

\var process_flag_t PROCESS_ATTACHED
Attached, spawn method will block until process ends and then return process exit code

\var process_flag_t PROCESS_DETACHED
Detached, spawn method will immediately return with code 0

\var process_flag_t PROCESS_CONSOLE
Create a console window for process

\var process_flag_t PROCESS_STDSTREAMS
Create stdout/stdin pipes to process

\var process_flag_t PROCESS_WINDOWS_USE_SHELLEXECUTE
Windows platform only, use ShellExecute instead of CreateProcess

\var process_flag_t PROCESS_OSX_USE_OPENAPPLICATION
MacOSX platform only, use LSOpenApplication instead of fork/execve


\enum process_status_t
\brief Process status
\details Process status

\var process_status_t PROCESS_INVALID_ARGS
Returned when given invalid arguments

\var process_status_t PROCESS_TERMINATED_SIGNAL
Returned when process was terminated by signal

\var process_status_t PROCESS_WAIT_INTERRUPTED
Returned when process wait was interrupted

\var process_status_t PROCESS_WAIT_FAILED
Returned when process wait failed for unknown reasons

\var process_status_t PROCESS_STILL_ACTIVE
Returned when detached process is still running


\enum foundation_event_id
\brief Event identifiers
\details Foundation library level event identifiers. These event identifiers are only
valid in conjunction with foundation event streams. Other event streams will use
their own event identifiers with the same value, and event streams should be treated
as separate "namespaces" for event identifiers.

\var foundation_event_id FOUNDATIONEVENT_START
Application has been asked to start

\var foundation_event_id FOUNDATIONEVENT_TERMINATE
Application has been asked to terminate

\var foundation_event_id FOUNDATIONEVENT_PAUSE
Application has been asked to pause

\var foundation_event_id FOUNDATIONEVENT_RESUME
Application has been asked to resume

\var foundation_event_id FOUNDATIONEVENT_FILE_CREATED
File was created

\var foundation_event_id FOUNDATIONEVENT_FILE_DELETED
File was deleted

\var foundation_event_id FOUNDATIONEVENT_FILE_MODIFIED
File was modified

\var foundation_event_id FOUNDATIONEVENT_LOW_MEMORY_WARNING
Low memory warning

\var foundation_event_id FOUNDATIONEVENT_DEVICE_ORIENTATION
Device orientation changed


\enum event_flag_t
\brief Event flags
\details Event flags

\var event_flag_t EVENTFLAG_DELAY
Event is delayed and will be delivered at a later timestamp


\enum blowfish_mode_t
\brief Cipher mode
\details Blowfish block cipher mode of operation (http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation)

\var blowfish_mode_t BLOWFISH_ECB
Electronic codebook

\var blowfish_mode_t BLOWFISH_CBC
Cipher-block chaining

\var blowfish_mode_t BLOWFISH_CFB
Cipher feedback

\var blowfish_mode_t BLOWFISH_OFB
Output feedback


\enum radixsort_data_t
\brief Radix sort data types
\details Radix sort data types

\var radixsort_data_t RADIXSORT_INT32
32-bit signed integer

\var radixsort_data_t RADIXSORT_UINT32
32-bit unsigned integer

\var radixsort_data_t RADIXSORT_INT64
64-bit signed integer

\var radixsort_data_t RADIXSORT_UINT64
64-bit unsigned integer

\var radixsort_data_t RADIXSORT_FLOAT32
32-bit floating point

\var radixsort_data_t RADIXSORT_FLOAT64
64-bit floating point


\enum device_orientation_t
\brief Device orientation
\details Device orientation

\var device_orientation_t DEVICEORIENTATION_UNKNOWN
Orientation not known

\var device_orientation_t DEVICEORIENTATION_PORTRAIT
Device oriented vertically, bottom of device down

\var device_orientation_t DEVICEORIENTATION_PORTRAIT_FLIPPED
Device oriented vertically, bottom of device up

\var device_orientation_t DEVICEORIENTATION_LANDSCAPE_CCW
Device oriented horizontally, bottom of device to the right (rotated counter-clockwise from portrait mode)

\var device_orientation_t DEVICEORIENTATION_LANDSCAPE_CW
Device oriented horizontally, bottom of device to the left (rotated clockwise from portrait mode)

\var device_orientation_t DEVICEORIENTATION_FACEUP
Device oriented flat, face up

\var device_orientation_t DEVICEORIENTATION_FACEDOWN
Device oriented flat, face down


\typedef hash_t
\brief Hash value
\details Hash value

\typedef tick_t
\brief Tick
\details Tick type used for absolute time measurements or timestamps

\typedef deltatime_t
\brief Deltatime
\details Deltatime type used for floating point time differences

\typedef object_t
\brief Object handle
\details Object handle used for identifying reference counted objects

\typedef radixsort_index_t
\brief Index for radix sorter
\details Default is 16 bit, typedef to 32 bit if need to sort more than 2^16 items in one array

\typedef uuid_t
\brief UUID
\details UUID


\typedef typedef int (*error_callback_fn)( error_level_t level, error_t error )
\brief Error handler callback
\details Error handler callback which is passed the error level and reported error. It should return
an implementation specific code which is then returned from the call to error_report
\param level Error level
\param error Error code
\return Implementation specific code which is passed back as return from error_report

\typedef int (*assert_handler_fn)( uint64_t context, const char* condition, const char* file, int line, const char* msg )
\brief Assert handler callback
\details Assert handler callback which is passed assert data and should do impementation specific processing and return
a code indicating if execution can continue or need to be aborted.
\param context Error context
\param condition String expressing the condition that failed
\param file Source file triggering the assert
\param line Source line triggering the assert
\param msg Assert message, if any
\return 1 if assert was not handled and execution should break, 0 if assert handled and execution can continue

\typedef void (*log_callback_fn)( uint64_t context, int severity, const char* msg )
\brief Log output callback
\details Log output callback. Called after each log message processed and output by the log functions.
\param context Log context
\param severity Log severity
\param msg Log message

\typedef int (*system_initialize_fn)( void )
\brief Subsystem initialization
\details Subsystem initialization function prototype. Return value should be the success state of initialization
\return 0 on success, <0 if failure (errors should be reported through log_error or error_report)

\typedef void (*system_shutdown_fn)( void )
\brief Subsystem shutdown
\details Subsystem shutdown function prototype. Will be called for each successfully initialized subsystem on shutdown

\typedef void* (*memory_allocate_fn)( uint64_t context, uint64_t size, unsigned int align, int hint )
\brief Memory allocation
\details Memory system allocation function prototype. Implementation of a memory system should provide an implementation
with this prototype for allocating memory
\param context Memory context
\param size Requested size
\param align Aligmnent requirement
\param hint Memory hitn (see memory_hint_t)
\return Pointer to allocated memory block if successful, 0 if error

\typedef void* (*memory_reallocate_fn)( void* p, uint64_t size, unsigned int align, uint64_t oldsize )
\brief Memory reallocation
\details Memory system reallocation function prototype. Implementation of a memory system should provide an implementation
with this prototype for reallocating memory
\param p Pointer to previous memory block
\param size Requested size
\param align Aligmnent requirement
\param oldsize Size of previous memory block
\return Pointer to allocated memory block if successful, 0 if error

\typedef void (*memory_deallocate_fn)( void* p )
\brief Memory deallocation
\details Memory system deallocation function prototype. Implementation of a memory system should provide an implementation
with this prototype for deallocating memory
\param p Pointer to memory block

\typedef void (*memory_track_fn)( void* p, uint64_t size )
\brief Memory tracking
\details Memory tracker tracking function prototype. Implementation of a memory tracker should provide an implementation
with this prototype for tracking memory allocations
\param p Pointer to allocated memory block
\param size Size of memory block

\typedef void (*memory_untrack_fn)( void* p )
\brief Memory tracking
\details Memory tracker untracking function prototype. Implementation of a memory tracker should provide an implementation
with this prototype for untracking memory allocations
\param p Pointer to deallocated memory block

\typedef void (*profile_write_fn)( void* data, uint64_t size )
\brief Profile data output callback
\details Callback function for writing profiling data to a stream
\param data Pointer to data block
\param size Size of data block

\typedef void (*profile_read_fn)( void* data, uint64_t size )
\brief Profile data input callback
\details Callback function for reading profiling data from a stream
\param data Pointer to data block
\param size Size of data block

\typedef void* (*thread_fn)( object_t thread, void* arg )
\brief Thread entry point
\details Thread entry point function prototype
\param thread Thread object handle
\param arg Argument passed by caller when starting the thread
\return Implementation specific data which can be obtained through thread_result

\typedef int (*crash_guard_fn)( void* arg )
\brief Function prototype for crash guards
\details Any function to be used in conjunction with the crash guard functionality of the library should have this
prototype to allow the crash guard to catch and handle exceptions correctly
\param Implementation specific argument passed to crash_guard
\return Implementation specific return value which is forwarded as return value from crash_guard (note that FOUNDATION_CRASH_DUMP_GENERATED is reserved)

\typedef void (*crash_dump_callback_fn)( const char* file )
\brief Crash callback
\details Crash callback function prototype, used to notify that an exception occurred and the process state was saved to a dump file
\param file Dump file path

\typedef void (*object_deallocate_fn)( object_t id, void* object )
\brief Object deallocation
\details Object deallocation function prototype, used to deallocate an object of a specific type
\param id Object handle
\param object Object pointer

\typedef stream_t* (*stream_open_fn)( const char* path, unsigned int mode )
\brief Stream open
\details Generic function to open a stream with the given path and mode
\param path Path, optionally including protocol
\param mode Open mode
\return Newly allocated stream, null if it could not be opened

\typedef uint64_t (*stream_read_fn)( stream_t* stream, void* dst, uint64_t size )
\brief Stream read
\details Generic function to read data from a stream
\param stream Stream to read from
\param dst Destination buffer
\param size Number of bytes to read
\return Number of bytes actually read

\typedef uint64_t (*stream_write_fn)( stream_t* stream, const void* src, uint64_t size )
\brief Stream write
\details Generic function to write data to a stream
\param stream Stream to write to
\param src Source buffer
\param size Number of bytes to write
\return Number of bytes actually written

\typedef bool (*stream_eos_fn)( stream_t* stream )
\brief Query if end of stream
\details Query if end of stream
\param stream Stream
\return true if stream at end, false if not

\typedef void (*stream_flush_fn)( stream_t* stream )
\brief Flush stream
\details Flush stream output buffers
\param stream Stream

\typedef void (*stream_truncate_fn)( stream_t* stream, uint64_t size )
\brief Truncate stream
\details Truncate stream size to the given size
\param stream Stream
\param size Size to truncate stream to

\typedef uint64_t (*stream_size_fn)( stream_t* stream )
\brief Get stream size
\details Get stream size
\param stream Stream
\return Stream size, 0 if invalid stream or unknown (like a network stream)

\typedef void (*stream_seek_fn)( stream_t* stream, int64_t offset, stream_seek_mode_t mode )
\brief Seek in stream
\details Seek in the stream. Only available if stream is seekable and not a sequential stream like
a network stream.
\param stream Stream
\param offset Seek offset
\param mode Seek mode (see #stream_seek_mode_t)

\typedef int64_t (*stream_tell_fn)( stream_t* stream )
\brief Get current stream position
\details Get current stream position
\param stream Stream
\return Current stream position, 0 if invalid stream or unknown

\typedef uint64_t (*stream_lastmod_fn)( const stream_t* stream )
\brief Get last modification timestamp
\details Get timestamp when stream was last modified (written to or attributes/size changed)
\param stream Stream
\return Last modification timestamp, 0 if invalid stream or unknown

\typedef uint128_t (*stream_md5_fn)( stream_t* stream )
\brief Get stream digest
\details Get stream digest. Only available if stream size is known and stream is seekable. Does
not modify the current stream position.
\param stream Stream
\return Digest of stream content, 0 if invalid stream or unknown

\typedef void (*stream_buffer_read_fn)( stream_t* stream )
\brief Buffer available data
\details If the stream has available data to be read from an external source (like a socket for
network streams), read and buffer the available data without blocking.
\param stream Stream

\typedef uint64_t (*stream_available_read_fn)( stream_t* stream )
\brief Query available data
\details Query how much data can be read from the stream without blocking
\param stream Stream
\return Number of bytes that can be read without blocking

\typedef void (*stream_finalize_fn)( stream_t* stream )
\brief Finalize stream object
\details Finalize a stream object that was previously initialized with a call to a specific
stream initialization function and free any associated resources.
\param stream Stream

\typedef stream_t* (*stream_clone_fn)( stream_t* stream )
\brief Clone stream
\details Clone stream, allocating a duplicate copy of the stream if the stream type supports it.
\param stream Stream
\return Clone of stream, 0 if not supported or invalid source stream


\struct md5_t
\brief MD5 state
\details Opaque struct holding an MD5 state

\var md5_t::init
\brief Initialization flag
\details Flag indicating the md5 state has been initialized and ready for digestion of data

\var md5_t::state
\brief Digest state
\details Internal state during data digestion

\var md5_t::count
\brief Digest counter
\details Internal counters during data digestion

\var md5_t::buffer
\brief Digest buffer
\details Internal buffer during data digestion

\var md5_t::digest
\brief Digest
\details Internal digest data buffer

\struct stream_t
\brief Base stream type
\details Base opaque stream type from which all streams are derived.

\var stream_t::type
\brief Stream type
\details Stream type identifier

\var stream_t::sequential
\brief Sequential flag
\details Flag indicating stream is sequential, meaning it can only read/write sequentially and only seek forward from current position. Generally stream size is unavailable for sequential streams.

\var stream_t::reliable
\brief Reliable flag
\details Flag indicating stream is reliable, meaning data written is guaranteed to be readable.

\var stream_t::inorder
\brief In-order flag
\details Flag indicating stream is in-order, meaning data written is guaranteed to be read in the same order as it was written.

\var stream_t::swap
\brief Byte order swap flag
\details Flag indicating stream is byte order swapped, meaning multi-byte data will be byte order swapped on read/write.

\var stream_t::byteorder
\brief Byte order indicator
\details Stream byte order indicator (0 = little endian, 1 = big endian)

\var stream_t::mode
\brief Stream open mode
\details Stream open mode (see #stream_mode_t)

\var stream_t::path
\brief Stream path
\details Stream path

\var stream_t::vtable
\brief Stream virtual table
\details Stream virtual table with stream type specific implementation function pointers

\struct stream_buffer_t
\brief Memory buffer stream
\details Stream interface for read/write to a memory buffer. This struct is also a stream_t (stream struct type declared at start of struct) and can be used in all functions operating on a stream_t. The memory buffer is allocated separately from the stream buffer.

\var stream_buffer_t::current
\brief Current read/write offset
\details Current read/write offset

\var stream_buffer_t::size
\brief Current size of buffer
\details Current size of buffer (always less or equal than capacity)

\var stream_buffer_t::capacity
\brief Current allocated capacity of buffer
\details Current allocated capacity of buffer

\var stream_buffer_t::buffer
\brief Memory buffer
\details Memory buffer

\var stream_buffer_t::own
\brief Flag indicating ownership of buffer
\details If this flag is set the memory buffer is owned internally by the stream buffer and will be deallocated together with the stream buffer. If not set, the ownership of the memory buffer is handled externally.

\var stream_buffer_t::grow
\brief Flag indicating if memory buffer can grow
\details If this flag is set (and if the memory buffer is owned by the stream buffer), the memory buffer can grow by reallocating memory if write requests increase size beyond the capacity of the memory buffer. If not set, any write requests beyond the capacity will fail.

\struct stream_pipe_t
\brief Pipe stream
\details Stream interface for read/write to a pipe. This struct is also a stream_t (stream struct type declared at start of struct) and can be used in all functions operating on a stream_t.

\var stream_pipe_t::handle_read
\brief Read handle (Windows only)
\details File handle for read end of the pipe.

\var stream_pipe_t::handle_write
\brief Write handle (Windows only)
\details File handle for write end of the pipe.

\var stream_pipe_t::fd_read
\brief Read file descriptor (Posix only)
\details File descriptor for read end of the pipe.

\var stream_pipe_t::fd_write
\brief Write file descriptor (Posix only)
\details File descriptor for write end of the pipe.

\struct stream_ringbuffer_t
\brief Ring buffer stream
\details Stream interface for read/write to a ring buffer. This struct is also a stream_t (stream struct type declared at start of struct) and can be used in all functions operating on a stream_t. Read and write operation can be concurrent (one single thread reading, one single thread writing) as availability of data is flagged with semaphores. Multiple readers and/or writers are not supported. Stream is sequential.

\var stream_ringbuffer_t::signal_read
\brief Read signal
\details Semaphore signalling availability of data for reading

\var stream_ringbuffer_t::signal_write
\brief Write signal
\details Semaphore signalling availability of data for writing

\var stream_ringbuffer_t::pending_read
\brief Number of bytes pending for reading
\details Number of bytes pending for reading

\var stream_ringbuffer_t::pending_write
\brief Number of bytes pending for writing
\details Number of bytes pending for writing

\var stream_ringbuffer_t::total_size
\brief Number of bytes written
\details Number of bytes written (total size of stream)

\struct stream_vtable_t
\brief Stream virtual function table
\details Virtual function table for stream implementations. Each stream type must provide implementation for the basic stream operations in this struct or set the entry to null to indicate that the functionality is not supported by the stream type.

\var stream_vtable_t::read
\brief Read function
\details Function to read data from stream.

\var stream_vtable_t::write
\brief Write function
\details Function to write data to stream.

\var stream_vtable_t::eos
\brief Query if end of stream
\details Function to query if current position is at end of stream.

\var stream_vtable_t::flush
\brief Flush data
\details Function to flush any pending data to stream.

\var stream_vtable_t::truncate
\brief Truncate to current position
\details Function to truncate stream to current position.

\var stream_vtable_t::size
\brief Query size
\details Function to query size of stream

\var stream_vtable_t::seek
\brief Seek function
\details Function to seek in stream.

\var stream_vtable_t::tell
\brief Query current position
\details Function to query the current position in the stream.

\var stream_vtable_t::lastmod
\brief Query last modification timestamp
\details Function to query the last modification timestamp of the stream.

\var stream_vtable_t::md5
\brief Query hash
\details Function to query the MD5 of the stream content

\var stream_vtable_t::buffer_read
\brief Buffer data
\details Function to buffer any incoming data for the stream.

\var stream_vtable_t::available_read
\brief Query available data
\details Function to query the amount of data that can be read without blocking.

\var stream_vtable_t::finalize
\brief Finalization function
\details Function to finalize the stream, free memory and release any resources associated with the stream.

\var stream_vtable_t::clone
\brief Clone function
\details Function to clone the stream.

\typedef mutex_t
\brief Mutex
\details Mutex for thread synchronization

\struct process_t
\brief Process
\details Opaque struct holding state for a process

\var process_t::wd
\brief Working directory
\details Working directory

\var process_t::path
\brief Executable path
\details Executable path

\var process_t::args
\brief Argument array
\details Array of argument strings

\var process_t::flags
\brief Flags
\details Flags, see #process_flag_t

\var process_t::code
\brief Exit code
\details Exit code for the process

\var process_t::pipeout
\brief Pipe for stdout
\details Pipe stream for stdout

\var process_t::pipein
\brief Pipe for stdin
\details Pipe stream for stdin

\var process_t::verb
\brief Shell verb
\details Windows only, shell verb used when launching process with ShellExecute

\var process_t::hp
\brief Process handle
\details Windows only, process handle

\var process_t::ht
\brief Thread handle
\details Windows only, thread handle

\var process_t::pid
\brief Process identifier
\details Posix only, process identifier

\var process_t::kq
\brief Process kqueue
\details MaxOS X only, kqueue for watching for process termination when launching process with LSOpenApplication

\struct event_block_t
\brief Event block
\details Event block holding a number of events for processing. Block can be maximum BUILD_SIZE_EVENT_BLOCK_LIMIT bytes in size

\var event_block_t::used
\brief Number of events pending
\details Number of events pending

\var event_block_t::capacity
\brief Capacity of event store buffer
\details Capacity of event store buffer

\var event_block_t::stream
\brief Event stream
\details Event stream owning this event block

\var event_block_t::events
\brief Event buffer
\details Memory buffer holding event data

\struct event_stream_t
\brief Event stream
\details Event stream from a single module. Event streams produce event blocks for processing

\var event_stream_t::write
\brief Write block index
\details Write block index

\var event_stream_t::read
\brief Read block index
\details Read block index

\var event_stream_t::block
\brief Event blocks
\details Event blocks, double buffered for concurrent read/write access

\struct ringbuffer_t
\brief Ringbuffer
\details Ring buffer, a shared memory area wrapped to a circular buffer with one read and one get pointer.

\var ringbuffer_t::total_read
\brief Total bytes read
\details Total number of bytes read from ring buffer

\var ringbuffer_t::total_write
\brief Total bytes written
\details Total number of bytes written to ring buffer

\var ringbuffer_t::offset_read
\brief Read offset
\details Current read offset

\var ringbuffer_t::offset_write
\brief Write offset
\details Current write offset

\var ringbuffer_t::buffer_size
\brief Size of buffer
\details Size of buffer in bytes

\var ringbuffer_t::buffer
\brief Buffer
\details Memory buffer

\struct blowfish_t
\brief Blowfish state
\details State for a blowfish encryption block

\var blowfish_t::parray
\brief Blowfish P-array
\details Blowfish P-array

\var blowfish_t::sboxes
\brief Blowfish S-boxes
\details Blowfish S-boxes

\struct radixsort_t
\brief Radix sorter
\details State for a radix sorter for a defined data type.

\var radixsort_t::type
\brief Data type
\details Data type being sorted

\var radixsort_t::size
\brief Maximum number of elements
\details Maximum number of elements that can be sorted

\var radixsort_t::lastused
\brief Number of elements in last sort
\details Number of elements in last call to #radixsort

\var radixsort_t::indices
\brief Index buffers
\details Index buffers holding sorted result

\var radixsort_t::histogram
\brief Histogram buffer
\details Buffer for histogram data

\var radixsort_t::offset
\brief Offset table
\details Offset table

\struct hashmap_t
\brief Hash map
\details Hash map container, mapping hash values to data pointers

\var hashmap_t::num_buckets
\brief Number of buckets
\details Number of buckets in the hash map.

\var hashmap_t::num_nodes
\brief Number of nodes
\details Total number of nodes in the hash map across all buckets.

\var hashmap_t::bucket
\brief Bucket array
\details Bucket array, represented as an array of hashmap_node_t arrays, which will be dynamically allocated
and reallocated to the required sizes.

\struct hashmap_node_t
\brief Hash map node
\details Single node in a hash map, mapping a single key to a single data value (pointer).

\var hashmap_node_t::key
\brief Hash map node key
\details Key for the hash map node.

\var hashmap_node_t::value
\brief Hash map node value
\details Value for the hash map node.

\struct hashtable32_entry_t
\brief Node in 32-bit hash table
\details Node in 32-bit hash table holding key and value for a single node.

\var hashtable32_entry_t::key
\brief Hash key
\details Hash key for node in hash table.

\var hashtable32_entry_t::value
\brief Value
\details Value for the corresponding hash key. If the value is zero the node is considered unused.

\struct hashtable64_entry_t
\brief Node in 64-bit hash table
\details Node in 64-bit hash table holding key and value for a single node.

\var hashtable64_entry_t::key
\brief Hash key
\details Hash key for node in hash table.

\var hashtable64_entry_t::value
\brief Value
\details Value for the corresponding hash key. If the value is zero the node is considered unused.

\struct hashtable32_t
\brief Hash table (32 bit data)
\details Hash table, a lock free mapping of hash values to 32 bit integer data.

\var hashtable32_t::capacity
\brief Capacity of table
\details Number of nodes in the table, i.e maximum number of key-value pairs that can be stored.

\var hashtable32_t::entries
\brief Table storage
\details Hash table storage as array of nodes where each node is a key-value pair.

\struct hashtable64_t
\brief Hash table (64 bit data)
\details Opaque struct holding state for a hash table, a lock free mapping of hash values to 64 bit integer data.

\var hashtable64_t::capacity
\brief Capacity of table
\details Number of nodes in the table, i.e maximum number of key-value pairs that can be stored.

\var hashtable64_t::entries
\brief Table storage
\details Hash table storage as array of nodes where each node is a key-value pair.

\struct regex_t
\brief Compiled regular expression
\details Opaque struct holding state for a compiled regular expression

\var regex_t::num_captures
\brief Number of captures
\details Counter during regex matching keeping number of currently captured substrings

\var regex_t::code_length
\brief Length of compiled code
\details Length of the compiled code array

\var regex_t::code_allocated
\brief Capacity of code array
\details Capacity of the code array (number of bytes)

\var regex_t::code
\brief Compiled code
\details Compiled regex code

\struct memory_system_t
\brief Memory management system declaration
\details Memory management system declaration with function pointers for all memory system entry points.

\var memory_system_t::allocate
\brief Memory allocation
\details Memory allocation

\var memory_system_t::reallocate
\brief Memory reallocation
\details Memory reallocation

\var memory_system_t::deallocate
\brief Memory deallocation
\details Memory deallocation

\var memory_system_t::initialize
\brief Initialization of memory system
\details Initialization of memory system

\var memory_system_t::shutdown
\brief Shutdown of memory system
\details Shutdown of memory system

\struct memory_tracker_t
\brief Memory tracking system declaration
\details Memory tracking system declarations with function pointers for all memory tracking entry points

\var memory_tracker_t::track
\brief Track a memory allocation
\details Track a memory allocation

\var memory_tracker_t::untrack
\brief Untrack a memory allocation
\details Untrack a memory allocation

\var memory_tracker_t::initialize
\brief Initialize memory tracker
\details Initialize memory tracker

\var memory_tracker_t::shutdown
\brief Shutdown memory tracker
\details Shutdown memory tracker

\union version_t
\brief Version identifier
\details Version identifier expressed as an 128-bit integer with major, minor, revision, build and control version number components

\var version_t::version
\brief Compound version
\details Compound version identifier

\var version_t::sub
\brief Version numbers
\details Version numbers separated into sections, "major.minor.revision-revision (control)"

\var version_t::sub.major
\brief Major version
\details Major version

\var version_t::sub.minor
\brief Minor version
\details Minor version

\var version_t::sub.revision
\brief Revision number
\details Revision number

\var version_t::sub.build
\brief Build number
\details Build number

\var version_t::sub.revision
\brief Source control version/revision/identifier
\details Source control version/revision/identifier

\var float32_cast_t::ival
\brief Integer interpretation
\details Integer interpretation of 32-bit floating point value

\var float32_cast_t::fval
\brief Float interpretation
\details Float interpretation of 32-bit floating point value

\var float64_cast_t::ival
\brief Integer interpretation
\details Integer interpretation of 64-bit floating point value

\var float64_cast_t::fval
\brief Float interpretation
\details Float interpretation of 64-bit floating point value

\var real_cast_t::ival
\brief Integer interpretation
\details Integer interpretation of real floating point value

\var real_cast_t::rval
\brief Float interpretation
\details Float interpretation of real floating point value

\struct application_t
\brief Application declaration
\details Application declaration

\var application_t::name
\brief Long name
\details Long descriptive name

\var application_t::short_name
\brief Short name
\details Short name, should only contain [a-z][A-Z][-_.]

\var application_t::config_dir
\brief Config directory
\details Config directory name

\var application_t::version
\brief Version
\details Version declaration

\var application_t::dump_callback
\brief Crash callback
\details Crash dump callback function

\var application_t::flags
\brief Application flags
\details Application flags (see application_flag_t)

\var application_t::instance
\brief Instance UUID
\details Instance UUID, generated by the foundation library on foundation initialization

\struct error_frame_t
\brief Data for a frame in the error context stack
\details Data for a frame in the error context stack

\var error_frame_t::name
\brief Error description
\details Error description

\var error_frame_t::data
\brief Data associated with error
\details Data associated with error

\struct error_context_t
\brief Error context stack
\details Error context stack

\var error_context_t::frame
\brief Error context stack
\details Error context stack

\var error_context_t::depth
\details Current depth
\details Current depth of error context stack

\struct memory_context_t
\brief Memory context stack
\details Memory context stack

\var memory_context_t::context
\brief Memory context stack
\details Memory context stack

\var memory_context_t::depth
\details Current depth
\details Current depth of memory context stack


\def FOUNDATION_DECLARE_OBJECT
\brief Object base structure declaration
\details Declares the base object data layout. Object structures should be 8-byte align for platform compatibility.
Use the macro as first declaration in an object struct:
<pre>typedef struct ALIGN(8)
{
  FOUNDATION_DECLARE_OBJECT;
  int       some_other_data;
  //[...]
} my_object_t;</pre>
\internal If changing base object layout, change objectmap_lookup and objectmap_lookup_ref \endinternal

\struct object_base_t
\brief Object base structure
\details Object base structure. All object-based designs must have this layout at the start of the structure.
See #FOUNDATION_DECLARE_OBJECT for a macro to declare the base layout in a structure.

\var object_base_t::ref
\brief Object reference count
\details Object reference count

\var object_base_t::flags
\brief Object flags
\details Object flags

\var object_base_t::id
\brief Object ID and handle (self)
\details Object ID and handle (self)

\struct objectmap_t
\brief Object map
\details Object map which maps object handles to object pointers. As object lifetime is managed by
reference counting, objects that are deallocated will invalidate the handle in the corresponding
object map.

\var objectmap_t::free
\brief Current first free slot
\details Current first free slot

\var objectmap_t::size
\brief Number of slots in map
\details Number of slots in map

\var objectmap_t::id
\brief Counter for next available ID
\details Counter for next available ID

\var objectmap_t::size_bits
\brief Number of bits needed for slot index
\details Number of bits needed for slot index

\var objectmap_t::id_max
\brief Maximum ID
\details Maximum ID depending on how many bits are used by size

\var objectmap_t::mask_index
\brief Bitmask for slot index
\details Bitmask for slot index

\var objectmap_t::mask_id
\brief Bitmask for ID
\details Bitmask for ID

\var objectmap_t::map
\brief Slot array
\details Slot array

\def FOUNDATION_DECLARE_EVENT
\brief Event base structure declaration
\details Declares the base event data layout. Event structures should use the macro as first
declaration in an event struct:
<pre>typedef struct
{
  FOUNDATION_DECLARE_EVENT;
  int some_other_data;
  //[...]
} my_event_t;</pre>

\struct event_t
\brief Event base structure
\details Event base structure. All event structures must have this layout at the start of the structure.
See #FOUNDATION_DECLARE_EVENT for a macro to declare the base layout in a structure.

\var event_t::id
\brief Event ID
\details Event ID

\var event_t::flags
\brief Event flags
\details Event flags

\var event_t::serial
\brief Event serial number
\details Event serial number

\var event_t::size
\brief Size of event data payload
\details Size of event data payload

\var event_t::object
\brief Object associated with event
\details Object associated with event

\var event_t::payload
\brief Event data payload
\details Event data payload

\struct semaphore_t
\brief Semaphore
\details Semaphore for thread synchronization and communication. Actual type specifics depend
on platform, the semaphore_t type should be treated as an opaque data struct.

\struct bitbuffer_t
\brief Bit buffer
\details Bit buffer for bit based I/O to a memory buffer or stream

\var bitbuffer_t::buffer
\brief Memory buffer
\details Memory buffer for buffer based I/O

\var bitbuffer_t::end
\brief End of buffer indicator
\details End of buffer indicator

\var bitbuffer_t::stream
\brief Stream
\details Stream for stream based I/O

\var bitbuffer_t::swap
\brief Swap flag
\details Swap flag for compatibility between machines with different endian architectures

\var bitbuffer_t::pending_read
\brief Pending data to be read
\details Pending data to be read

\var bitbuffer_t::pending_write
\brief Pending data to be written
\details Pending data to be written

\var bitbuffer_t::offset_read
\brief Current read offset
\details Current read offset in bits into pending data

\var bitbuffer_t::offset_write
\brief Current write offset
\details Current write offset in bits into pending data

\var bitbuffer_t::count_read
\brief Number of read bits
\details Total number of read bits

\var bitbuffer_t::count_write
\brief Number of written bits
\details Total number of written bits


\struct regex_capture_t
\brief Regex capture
\details Regex capture. Used to capture matching in a regex search. See regex_match in regex.h

\var regex_capture_t::substring
\brief Captured substring (NOT null terminated)
\details Captured substring (NOT null terminated)

\var regex_capture_t::length
\brief Length of captured substring
\details Length of captured substring


\fn version_t version_make( unsigned int major, unsigned int minor, unsigned int revision, unsigned int build, unsigned int control )
\brief Pack version definition into a 128-bit integer
\details Pack version definition into a 128-bit integer
\param major          Major version
\param minor          Minor version
\param revision       Revision number
\param build          Build number
\param control        Source control version/revision/identifier
\return               Packed version data


*/
