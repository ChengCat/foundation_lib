/*!

\file types.h
Foundation data types


\enum error_level_t
Error severity level. The higher the value, the more severe the error. Error level 0
(ERRORLEVEL_NONE) is used to indicate no error
\internal Do not change order! \endinternal

\var error_level_t ERRORLEVEL_NONE
No error

\var error_level_t ERRORLEVEL_DEBUG
Debug level, usually ignored in anything except debug builds. Execution will continue as expected.

\var error_level_t ERRORLEVEL_INFO
Information level, contains generally useful information. Execution will continue as expected.

\var error_level_t ERRORLEVEL_WARNING
Warning level, contains important information. Operation failed, but execution can continue.

\var error_level_t ERRORLEVEL_ERROR
Error level, contains vital information. Operation failed and execution might be affected.

\var error_level_t ERRORLEVEL_PANIC
Panic level, contains vital information. Operation failed and execution cannot continue.


\enum error_t
Error identifiers. Error 0 (ERROR_NONE) is used to indicate no error.
\internal Do not change order, only append! \endinternal

\var error_t ERROR_NONE
No error

\var error_t ERROR_INVALID_VALUE
An invalid value was passed to the function

\var error_t ERROR_UNSUPPORTED
The function is unsupported on the current system

\var error_t ERROR_NOT_IMPLEMENTED
The function is not yet implemented

\var error_t ERROR_OUT_OF_MEMORY
The function could not allocate the needed memory and/or resources

\var error_t ERROR_MEMORY_LEAK
A memory leak was detected

\var error_t ERROR_MEMORY_ALIGNMENT
Memory alignment check failed

\var error_t ERROR_INTERNAL_FAILURE
Internal failed, unspecified. The function encountered a state it did not expect or support

\var error_t ERROR_ACCESS_DENIED
The function call was not allowed

\var error_t ERROR_EXCEPTION
An exception was thrown

\var error_t ERROR_SYSTEM_CALL_FAIL
A system call failed

\var error_t ERROR_UNKNOWN_TYPE
The function encountered an unsupported data type for the requested operation

\var error_t ERROR_UNKNOWN_RESOURCE
The function could not resolve the resource to use in the requested operation

\var error_t ERROR_DEPRECATED
The function is deprecated and should not be used

\var error_t ERROR_ASSERT
An assert triggered

\var error_t ERROR_SCRIPT
A script generated an error

\var error_t ERROR_LAST_BUILTIN
Marker, last reserved internal error identifier


\enum warning_t
Warning classes
\internal Do not change order, only append! \endinternal

\var warning_t WARNING_PERFORMANCE
Performance warning

\var warning_t WARNING_DEPRECATED
Function is deprecated

\var warning_t WARNING_BAD_DATA
Bad data passed to/used in function

\var warning_t WARNING_MEMORY
Memory issues (running low, leaks, ...)

\var warning_t WARNING_UNSUPPORTED
Unsupported function

\var warning_t WARNING_SUSPICIOUS
General warning, function encountered a suspicious state

\var warning_t WARNING_SYSTEM_CALL_FAIL
System call failed

\var warning_t WARNING_DEADLOCK
Potential deadlock encountered

\var warning_t WARNING_SCRIPT
Script generated warning

\var warning_t WARNING_LAST_BUILTIN
Marker, last reserved inernal warning identifier


\enum memory_hint_t
Memory hints

\var memory_hint_t MEMORY_PERSISTENT
Memory is persistent (retained when function returns)

\var memory_hint_t MEMORY_TEMPORARY
Memory is temporary (extremely short lived and generally freed before function returns)

\var memory_hint_t MEMORY_THREAD
Memory is thread local

\var memory_hint_t MEMORY_32BIT_ADDRESS
Memory should be allocated in low 32-bit address space


\enum platform_t
Platform identifiers. For compile-time platform selection, use the FOUNDATION_PLATFORM_[...] preprocessor macros

\var platform_t PLATFORM_WINDOWS
Windows

\var platform_t PLATFORM_LINUX
Linux

\var platform_t PLATFORM_MACOSX
MacOS X

\var platform_t PLATFORM_IOS
iOS (iPhone, iPad)

\var platform_t PLATFORM_ANDROID
Android

\var platform_t PLATFORM_RASPBERRYPI
Raspberry Pi (linux flavour)


\enum architecture_t
Architecture identifiers for all architectures the engine supports. For compile-time selection of
architecture, use the <code>FOUNDATION_ARCH_[...]</code> preprocessor macros.

\var architecture_t ARCHITECTURE_X86
x86 (Classic 32-bit x86 compatible CPUs)

\var architecture_t ARCHITECTURE_X86_64
x86-64 (x86 with 64-bit extensions)

\var architecture_t ARCHITECTURE_PPC
PowerPC 32-bit

\var architecture_t ARCHITECTURE_PPC_64
PowerPC 64-bit

\var architecture_t ARCHITECTURE_ARM6
ARM 6

\var architecture_t ARCHITECTURE_ARM7
ARM 7

\var architecture_t ARCHITECTURE_ARM8_64
ARM 8 64bit

\var architecture_t ARCHITECTURE_ARM5
ARM 5

\var architecture_t ARCHITECTURE_MIPS
MIPS


\enum byteorder_t
Machine byte order identifiers

\var byteorder_t BYTEORDER_LITTLEENDIAN
Little endian

\var byteorder_t BYTEORDER_BIGENDIAN
Big endian


\enum application_flag_t
Application flags

\var application_flag_t APPLICATION_UTILITY
Application is a command line utility and should not have a normal windowing system interaction loop)

\var application_flag_t APPLICATION_DAEMON
Application is a daemon/service


\enum stream_mode_t
Open modes for streams

\var stream_mode_t STREAM_IN
Readable

\var stream_mode_t STREAM_OUT
Writable

\var stream_mode_t STREAM_TRUNCATE
Truncate on open

\var stream_mode_t STREAM_ATEND
Position at end on open

\var stream_mode_t STREAM_BINARY
Read/write in binary mode

\var stream_mode_t STREAM_SYNC
Force sync on each write


\enum stream_type_t
Built-in stream type identifiers

\var stream_type_t STREAMTYPE_INVALID
Invalid identifier

\var stream_type_t STREAMTYPE_MEMORY
Memory buffer stream

\var stream_type_t STREAMTYPE_FILE
File system stream

\var stream_type_t STREAMTYPE_SOCKET
Socket stream

\var stream_type_t STREAMTYPE_RINGBUFFER
Ring buffer stream

\var stream_type_t STREAMTYPE_ASSET
Asset stream (Android)

\var stream_type_t STREAMTYPE_PIPE
Pipe stream

\var stream_type_t STREAMTYPE_STDSTREAM
Standard stream (stdin, stderr, stdout)


\enum stream_seek_mode_t
Stream seek directions

\var stream_seek_mode_t STREAM_SEEK_BEGIN
Seek from start of stream

\var stream_seek_mode_t STREAM_SEEK_CURRENT
Seek from current position of stream

\var stream_seek_mode_t STREAM_SEEK_END
Seek from end of stream


\enum thread_priority_t
Thread priority

\var thread_priority_t THREAD_PRIORITY_LOW
Lowest possible priority

\var thread_priority_t THREAD_PRIORITY_BELOWNORMAL
Unimportant priority

\var thread_priority_t THREAD_PRIORITY_NORMAL
Normal priority

\var thread_priority_t THREAD_PRIORITY_ABOVENORMAL
Important priority

\var thread_priority_t THREAD_PRIORITY_HIGHEST
High priority

\var thread_priority_t THREAD_PRIORITY_TIMECRITICAL
Absolutely critical


\enum process_flag_t
Process flags

\var process_flag_t PROCESS_ATTACHED
Attached, spawn method will block until process ends and then return process exit code

\var process_flag_t PROCESS_DETACHED
Detached, spawn method will immediately return with code 0

\var process_flag_t PROCESS_CONSOLE
Create a console window for process

\var process_flag_t PROCESS_STDSTREAMS
Create stdout/stdin pipes to process

\var process_flag_t PROCESS_WINDOWS_USE_SHELLEXECUTE
Windows platform only, use ShellExecute instead of CreateProcess

\var process_flag_t PROCESS_OSX_USE_OPENAPPLICATION
MacOSX platform only, use LSOpenApplication instead of fork/execve


\enum process_status_t
Process status

\var process_status_t PROCESS_INVALID_ARGS
Returned when given invalid arguments

\var process_status_t PROCESS_TERMINATED_SIGNAL
Returned when process was terminated by signal

\var process_status_t PROCESS_WAIT_INTERRUPTED
Returned when process wait was interrupted

\var process_status_t PROCESS_WAIT_FAILED
Returned when process wait failed for unknown reasons

\var process_status_t PROCESS_STILL_ACTIVE
Returned when detached process is still running


\enum foundation_event_id
Foundadtion library level event identifiers

\var foundation_event_id FOUNDATIONEVENT_START
Application has been asked to start

\var foundation_event_id FOUNDATIONEVENT_TERMINATE
Application has been asked to terminate

\var foundation_event_id FOUNDATIONEVENT_PAUSE
Application has been asked to pause

\var foundation_event_id FOUNDATIONEVENT_RESUME
Application has been asked to resume

\var foundation_event_id FOUNDATIONEVENT_FILE_CREATED
File was created

\var foundation_event_id FOUNDATIONEVENT_FILE_DELETED
File was deleted

\var foundation_event_id FOUNDATIONEVENT_FILE_MODIFIED
File was modified

\var foundation_event_id FOUNDATIONEVENT_LOW_MEMORY_WARNING
Low memory warning

\var foundation_event_id FOUNDATIONEVENT_DEVICE_ORIENTATION
Device orientation changed


\enum event_flag_t
Event flags

\var event_flag_t EVENTFLAG_DELAY
Event is delayed and will be delivered at a later timestamp


\enum blowfish_mode_t
Blowfish block cipher mode of operation (http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation)

\var blowfish_mode_t BLOWFISH_ECB 
Electronic codebook

\var blowfish_mode_t BLOWFISH_CBC
Cipher-block chaining

\var blowfish_mode_t BLOWFISH_CFB
Cipher feedback

\var blowfish_mode_t BLOWFISH_OFB
Output feedback


\enum radixsort_data_t
Radix sort data types

\var radixsort_data_t RADIXSORT_INT32
32-bit signed integer

\var radixsort_data_t RADIXSORT_UINT32
32-bit unsigned integer

\var radixsort_data_t RADIXSORT_INT64
64-bit signed integer

\var radixsort_data_t RADIXSORT_UINT64
64-bit unsigned integer

\var radixsort_data_t RADIXSORT_FLOAT32
32-bit floating point

\var radixsort_data_t RADIXSORT_FLOAT64
64-bit floating point


\enum device_orientation_t
Device orientation

\var device_orientation_t DEVICEORIENTATION_UNKNOWN
Orientation not known

\var device_orientation_t DEVICEORIENTATION_PORTRAIT
Device oriented vertically, bottom of device down

\var device_orientation_t DEVICEORIENTATION_PORTRAIT_FLIPPED
Device oriented vertically, bottom of device up

\var device_orientation_t DEVICEORIENTATION_LANDSCAPE_CCW
Device oriented horizontally, bottom of device to the right (rotated counter-clockwise from portrait mode)

\var device_orientation_t DEVICEORIENTATION_LANDSCAPE_CW
Device oriented horizontally, bottom of device to the left (rotated clockwise from portrait mode)

\var device_orientation_t DEVICEORIENTATION_FACEUP
Device oriented flat, face up

\var device_orientation_t DEVICEORIENTATION_FACEDOWN
Device oriented flat, face down


\typedef hash_t
Hash value

\typedef tick_t
Tick type used for absolute time measurements or timestamps

\typedef deltatime_t
Deltatime type used for floating point time differences

\typedef object_t
Object handle used for identifying reference counted objects

\typedef radixsort_index_t
\brief Index for radix sorter
\details Default is 16 bit, typedef to 32 bit if need to sort more than 2^16 items in one array

\typedef uuid_t
UUID


\typedef typedef int (*error_callback_fn)( error_level_t level, error_t error )
\brief Error handler callback
\details Error handler callback which is passed the error level and reported error. It should return
an implementation specific code which is then returned from the call to error_report
\param level Error level
\param error Error code
\return Implementation specific code which is passed back as return from error_report

\typedef int (*assert_handler_fn)( uint64_t context, const char* condition, const char* file, int line, const char* msg )
\brief Assert handler callback
\details Assert handler callback which is passed assert data and should do impementation specific processing and return
a code indicating if execution can continue or need to be aborted.
\param context Error context
\param condition String expressing the condition that failed
\param file Source file triggering the assert
\param line Source line triggering the assert
\param msg Assert message, if any
\return 1 if assert was not handled and execution should break, 0 if assert handled and execution can continue

\typedef void (*log_callback_fn)( uint64_t context, int severity, const char* msg )
\brief Log output callback
\details Log output callback. Called after each log message processed and output by the log functions.
\param context Log context
\param severity Log severity
\param msg Log message

\typedef int (*system_initialize_fn)( void )
\brief Subsystem initialization
\details Subsystem initialization function prototype. Return value should be the success state of initialization
\return 0 on success, <0 if failure (errors should be reported through log_error or error_report)

\typedef void (*system_shutdown_fn)( void )
\brief Subsystem shutdown
\details Subsystem shutdown function prototype. Will be called for each successfully initialized subsystem on shutdown

\typedef void* (*memory_allocate_fn)( uint64_t context, uint64_t size, unsigned int align, int hint )
\brief Memory allocation
\details Memory system allocation function prototype. Implementation of a memory system should provide an implementation
with this prototype for allocating memory
\param context Memory context
\param size Requested size
\param align Aligmnent requirement
\param hint Meory hitn (see memory_hint_t)
\return Pointer to allocated memory block if successful, 0 if error

\typedef void* (*memory_allocate_zero_fn)( uint64_t context, uint64_t size, unsigned int align, int hint )
\brief Memory allocation
\details Memory system allocate-and-zero-out function prototype. Implementation of a memory system should provide an implementation
with this prototype for allocating memory pre-filled with zero
\param context Memory context
\param size Requested size
\param align Aligmnent requirement
\param hint Meory hitn (see memory_hint_t)
\return Pointer to allocated memory block if successful, 0 if error

\typedef void* (*memory_reallocate_fn)( void* p, uint64_t size, unsigned int align, uint64_t oldsize )
\brief Memory reallocation
\details Memory system reallocation function prototype. Implementation of a memory system should provide an implementation
with this prototype for reallocating memory
\param p Pointer to previous memory block
\param size Requested size
\param align Aligmnent requirement
\param oldsize Size of previous memory block
\return Pointer to allocated memory block if successful, 0 if error

\typedef void (*memory_deallocate_fn)( void* p )
\brief Memory deallocation
\details Memory system deallocation function prototype. Implementation of a memory system should provide an implementation
with this prototype for deallocating memory
\param p Pointer to memory block

\typedef void (*memory_track_fn)( void* p, uint64_t size )
\brief Memory tracking
\details Memory tracker tracking function prototype. Implementation of a memory tracker should provide an implementation
with this prototype for tracking memory allocations
\param p Pointer to allocated memory block
\param size Size of memory block

\typedef void (*memory_untrack_fn)( void* p )
\brief Memory tracking
\details Memory tracker untracking function prototype. Implementation of a memory tracker should provide an implementation
with this prototype for untracking memory allocations
\param p Pointer to deallocated memory block

\typedef void (*profile_write_fn)( void* data, uint64_t size )
\brief Profile data output callback
\details Callback function for writing profiling data to a stream
\param data Pointer to data block
\param size Size of data block

\typedef void (*profile_read_fn)( void* data, uint64_t size )
\brief Profile data input callback
\details Callback function for reading profiling data from a stream
\param data Pointer to data block
\param size Size of data block

\typedef void* (*thread_fn)( object_t thread, void* arg )
\brief Thread entry point
\details Thread entry point function prototype
\param thread Thread object handle
\param arg Argument passed by caller when starting the thread
\return Implementation specific data which can be obtained through thread_result

\typedef int (*crash_guard_fn)( void* arg )
\brief Function prototype for crash guards
\details Any function to be used in conjunction with the crash guard functionality of the library should have this
prototype to allow the crash guard to catch and handle exceptions correctly
\param Implementation specific argument passed to crash_guard
\return Implementation specific return value which is forwarded as return value from crash_guard (note that FOUNDATION_CRASH_DUMP_GENERATED is reserved)

\typedef void (*crash_dump_callback_fn)( const char* file )
\brief Crash callback
\details Crash callback function prototype, used to notify that an exception occurred and the process state was saved to a dump file
\param file Dump file path

\typedef md5_t
\brief MD5 state
\details Opaque struct holding an MD5 state

\typedef stream_t
\brief Base stream type
\details Base opaque stream type from which all streams are derived.

\typedef mutex_t
\brief Mutex
\details Mutex for thread synchronization

\typedef process_t
\brief Process
\details Opaque struct holding state for a process

\typedef event_block_t
\brief Event block
\details Event block holding a number of events for processing. Block can be maximum BUILD_SIZE_EVENT_BLOCK_LIMIT bytes in size

\typedef event_stream_t
\brief Event strem
\details Opaque struct holding state for a event stream from a single module. Event streams produce event blocks for processing

\typedef ringbuffer_t
\brief Ringbuffer
\details Opaque struct holding state for a ring buffer. A ring buffer is a shared memory area where one input and one output stream concurrently write and read data.

\typedef blowfish_t
\brief Blowfish state
\details Opaque struct holding state for a blowfish encryption block

\typedef radixsort_t
\brief Radix sorter
\details Opaque struct holding state for a radix sorter for a defined data type.

\typedef hashmap_t
\brief Hash map
\details Opaque struct holding state for a hash map, mapping hash values to data pointers

\typedef hashtable32_t
\brief  Hash table (32 bit data)
\details Opaque struct holding state for a hash table, a lock free mapping of hash values to 32 bit integer data

\typedef hashtable64_t
\brief  Hash table (64 bit data)
\details Opaque struct holding state for a hash table, a lock free mapping of hash values to 64 bit integer data

\typedef regex_t
\brief Compiled regular expression
\details Opaque struct holding state for a compiled regular expression

*/
