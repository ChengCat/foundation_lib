
/*!

\file hash.h
\brief Murmur3 hash
\details Murmur3 hash from http://code.google.com/p/smhasher/
Also wrapper macros around predefined static hashed strings
See hashify utility for creating static hashes


\fn hash_t hash( const void* key, const unsigned int len )
\brief Hash data
\details Hash data memory blob. Pointer must be aligned to 8 bytes
\param key Key to hash
\param len Length of key in bytes
\return Hash of key

\fn const char* hash_to_string( const hash_t value )
\brief Reverse hash lookup
\details Reverse hash lookup. Only available if #BUILD_ENABLE_STATIC_HASH_DEBUG is
enabled, otherwise if will always return an empty string
\param value Hash value
\return String matching hash value, or empty string if not found

\def static_hash_string
\brief Declare statically hashed string
\details Declare a statically hashed string. If #BUILD_ENABLE_STATIC_HASH_DEBUG is enabled
in the build config this will allow the string to be reverse looked up with hash_to_string.
Static hash strings are usually defined by using the hashify tool on a declaration file,
see the hashstrings.txt and corresponding hashstrings.h header
\param key Key string
\param value Hash value

\def HASH_EMPTY_STRING
\brief Hash of empty string
\details Hash of an empty string (length 0)

*/
