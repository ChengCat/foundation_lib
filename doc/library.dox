
/*!

\file library.h
\brief Dynamic library loader
\details Dynamic library loader for platforms supporting this concept


\fn object_t library_load( const char* name )
\brief Load library
\details Load library. Where libraries are searched is system dependent. If the
same library was already previously loaded, a new reference to the same library
object will be returned, otherwise a new library object will be created and
referenced. Use #library_unload to release a reference to a library object.
\param name Dynamic library name (or optional path)
\return Null if not found or error loading, library object reference if loaded successfully

\fn object_t library_ref( object_t library )
\brief Reference library
\details Reference library, explicitly increase the reference count of the library object.
Use #library_unload to release a reference to a library object.
\param library Library object
\return Object handle if library object is still valid, 0 if library object is no longer valid

\fn void library_unload( object_t library )
\brief Unload library
\details Unload library, release a reference to the library object. Once the library object
has no more references, the underlying structure will be deallocated and the system resources
associated will be released.
\param library Library object

\fn void* library_symbol( object_t library, const char* name )
\brief Symbol lookup
\details Lookup a symbol by name in the library.
\param library Library object
\param name Symbol name
\return Address of symbol, 0 if not found

\fn const char* library_name( object_t library )
\brief Get library name
\details Get library name
\param library Library object
\return Library name, 0 if not a valid library

\fn bool library_valid( object_t library )
\brief Query if valid library
\details Query if valid library
\param library Library object
\return true if loaded and valid, false if not

*/
