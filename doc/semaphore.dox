
/*!

\file semaphore.h
\brief Semaphore
\details Semaphore for thread synchronization and notification


\fn void semaphore_initialize( semaphore_t* semaphore, unsigned int value )
\brief Initialize semaphore
\details Initialize semaphore with the given value.
\param semaphore Semaphore
\param value Initial value

\fn void semaphore_initialize_named( semaphore_t* semaphore, const char* name, unsigned int value )
\brief Initialize named semaphore
\details Initialize a named semaphore with the given value.
\param semaphore Semaphore
\param name  Global name
\param value Initial value

\fn void semaphore_destroy( semaphore_t* semaphore )
\brief Destroy semaphore
\details Destroy semaphore. The semaphore value must be >= than the value it was created with,
or it will be considered to be still in use (on OSX/iOS targets this will cause a debug abort).
\param semaphore Semaphore

\fn bool semaphore_wait( semaphore_t* semaphore )
\brief Wait on semaphore
\details Wait on semaphore.
\param semaphore Semaphore
\return true if successful, false if error or interrupted

\fn bool semaphore_try_wait( semaphore_t* semaphore, int milliseconds )
\brief Try wait on semaphore
\details Try waiting on semaphore.
\param semaphore Semaphore
\param milliseconds Timeout in milliseconds
\return true if successful, false if timeout or error/interrupted

\fn void semaphore_post( semaphore_t* semaphore )
\brief Post semaphore
\details Post semaphore
\param semaphore Semaphore

*/
