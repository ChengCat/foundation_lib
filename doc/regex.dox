
/*!

\file regex.h
\brief Small regular expression implementation
\details Small regular expression implementation matching a subset of Perl regular expression syntax.
<pre>^        Match beginning of string
    $        Match end of string
    .        Match one character
    ()       Group and capture substring
    []       Match any character from the grouped set
    [^]      Match any character but ones from the grouped set
    \\s       Match whitespace
    \\S       Match non-whitespace
    \\d       Match decimal digits
    \\D       Match non-digits
    \\n       Match newline
    \\r       Match carriage return
    +        Match one or more times (longest possible match)
    +?       Match one or more times (shortest possible match)
    *        Match zero or more times (longest possible match)
    *?       Match zero or more times (shortest possible match)
    ?        Match zero or once
    \\XX      Match byte with hex value 0xXX
    \\meta    Match one of the meta characters ^$()[].*+?|\
</pre>


\fn regex_t* regex_compile( const char* pattern )
\brief Precompile expression
\details Precompile a regular expression
\param pattern Pattern string
\return Compiled expression, null if error

\fn bool regex_match( regex_t* regex, const char* input, int inlength, regex_capture_t* captures, int maxcaptures )
\brief Match input with expression
\details Match input string with regular expression with optional captures
\param regex Compiled expression
\param input Input string
\param inlength Input length (0 for input string length)
\param captures Result capture array, null if not wanted
\param maxcaptures Maximum number of captures
\return true if string matches expression, false if not

\fn void regex_deallocate( regex_t* regex )
\brief Free expression
\details Free a compiled expression
\param regex Compiled expression

*/

