
/*!

\file blowfish.h
\brief Blowfish encryption and decryption
\details Blowfish encryption and decryption


\fn blowfish_t* blowfish_allocate( void )
\brief Allocate blowfish state
\details Allocate a blowfish state object. Does NOT initialize the object, must
be done with a call to blowfish_initialize before using the object for
encryption/descryption.
\return New blowfish state object

\fn void blowfish_deallocate( blowfish_t* blowfish )
\brief Deallocate blowfish state
\details Deallocate a blowfish state object
\param blowfish Blowfish state object to deallocate

\fn void blowfish_initialize( blowfish_t* blowfish, const void* key, const unsigned int length )
\brief Initialize with key
\details Initialize the blowfish state object with the given key data. After
a call to this function the state object can be used for encryption/decryption.
\param blowfish Blowfish state object
\param key Key data
\param length Length of key data in bytes

\fn void blowfish_encrypt( const blowfish_t* blowfish, void* data, unsigned int length, const blowfish_mode_t mode, const uint64_t vec )
\brief Encrypt data
\details Encrypt data using the given blowfish state object. Encryption is done in-place, no memory
allocation is done internally.
\param blowfish            Blowfish state object
\param data                Data buffer
\param length              Length of data buffer in bytes
\param mode                Mode of operation (see blowfish_mode_t)
\param vec                 Initialization vector

\fn void blowfish_decrypt( const blowfish_t* blowfish, void* data, unsigned int length, const blowfish_mode_t mode, const uint64_t vec )
\brief Decrypt data
\details Decrypt data using the given blowfish state object. Decryption is done in-place, no memory
allocation is done internally.
\param blowfish            Blowfish state object
\param data                Data buffer
\param length              Length of data buffer in bytes
\param mode                Mode of operation (see blowfish_mode_t)
\param vec                 Initialization vector

*/
