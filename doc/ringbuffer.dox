
/*!

\file ringbuffer.h
\brief Memory ring buffer
\details Simple memory ring buffer abstraction. Read and write are not
thread safe. The ring buffer stream uses a semaphore to block and notify readers.


\fn ringbuffer_t* ringbuffer_allocate( unsigned int size )
\brief Allocate ring buffer
\details Allocate ring buffer of given size.
\param size Size in bytes
\return Ring buffer

\fn void ringbuffer_deallocate( ringbuffer_t* buffer )
\brief Free ring buffer
\details Free ring buffer memory.
\param buffer Ring buffer

\fn unsigned int ringbuffer_size( ringbuffer_t* buffer )
\brief Get ring buffer size
\details Get ring buffer size.
\param buffer Ring buffer
\return Size of ring buffer

\fn void ringbuffer_reset( ringbuffer_t* buffer )
\brief Reset ring buffer
\details Reset ring buffer read/write pointers and statistics to initial state
\param buffer Ring buffer

\fn unsigned int ringbuffer_read( ringbuffer_t* buffer, void* dest, unsigned int num )
\brief Read from buffer
\details Read from buffer.
\param buffer Ring buffer
\param dest Destination pointer
\param num Number of bytes requested to be read
\return Number of bytes actually read

\fn unsigned int ringbuffer_write( ringbuffer_t* buffer, const void* source, unsigned int num )
\brief Write to buffer
\details Write to buffer.
\param buffer Ring buffer
\param source Source pointer
\param num Number of bytes requested to be written
\return Number of bytes actually written

\fn uint64_t ringbuffer_total_read( ringbuffer_t* buffer )
\brief Get total bytes read
\details Get total number of bytes read. Will be reset to zero in #ringbuffer_reset
\param buffer Ring buffer
\return Total number of bytes read

\fn uint64_t ringbuffer_total_written( ringbuffer_t* buffer )
\brief Get total bytes written
\details Get total number of bytes written. Will be reset to zero in #ringbuffer_reset
\param buffer Ring buffer
\return Total number of bytes written

\fn stream_t* ringbuffer_stream_allocate( unsigned int buffer_size, uint64_t total_size )
\brief Allocate ring buffer stream
\details Allocate a ringbuffer stream, which is basically a stream wrapped on top of a ringbuffer. Reads and writes
block on semaphores on missing data, making it usable for ringbuffer threaded i/o
\param buffer_size Size of ringbuffer
\param total_size Total size of stream, 0 if infinite
\return  Ringbuffer stream

*/
