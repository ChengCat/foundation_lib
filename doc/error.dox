
/*!

\file error.h
\brief Error context and reporting
\details Error context and reporting. Most error handling is done per-thread, including
current error and error callback. If error context is not enabled in the build
all error context macros evaluate to no-ops.


\fn error_t error( void )
\brief Get current error
\details Get current per-thread error, and reset current thread error to ERROR_NONE
\return Current error for the calling thread

\fn int error_report( error_level_t level, error_t err )
\brief Report error
\details Report error for the calling thread. Does not affect error state for any other thread.
If a error callback is set for the calling thread it will be called and the
return value propagated.
\param level          Error level
\param err            Error identifier
\return               Return value from error callback if set, 0 if no callback set

\fn error_callback_fn error_callback( void )
\brief Get error callback
\details Get per-thread error handling callback
\return Error callback

\fn void error_set_callback( error_callback_fn callback )
\brief Set error callback
\details Set new per-thread error handling callback. The callback will be called each time
the calling thread reports an error.
\param callback Error callback

\def error_context_push
\brief Push error context
\details Push a new error context and associated data on the error context stack.
Both context and data must be valid for as long as it remains on the stack.
\param name Context name
\param data Context data

\def error_context_pop
\brief Pop error context
\details Pop the top error context off the error context stack

\def error_context_clear
\brief Clear error context
\details Clear the error context

\def error_context_buffer
\brief Generate error context stack trace
\details Generate a error context stack description string in the given buffer, limited
to the given size
\param buffer Destination buffer
\param size Maximum buffer size

\def error_context
\brief Get error context
\details Get the current error context, or 0 if no context set/available

\def error_context_declare_local
\brief Make local declaration
\details Make a local declaration depending on if error contexts are enabled
in the build or not. If error contexts are disabled the expression will evaluate
to void and not evaluate any code.
\param decl Declaration

\def error_context_thread_deallocate
\brief Clean up memory
\details Clean up thread local storage related to error context on thread exit

*/
