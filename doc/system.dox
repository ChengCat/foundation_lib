
/*!

\file system.h
\brief System queries
\details System queries and utility functions. All functions returning a string (const char*) are thread safe and return a thread-local buffer that
is valid until the next call to a system function returning a string or the termination of the thread.

\fn int system_error( void )
\brief Thread local system error code
\details Get the current thread local system error code (errno in Posix, GetLastError on Windows)
\return Error code

\fn void system_error_reset( void )
\brief Reset thread local system error code
\details Reset the current thread local system error code to indicate no error

\fn const char* system_error_message( int code )
\brief Translate error code
\details Translate given error code into error message. System errno (unix variants) or last error code (Windows)
will be used if the given code is 0.
\param code Error code
\return Error message (static buffer), empty string if no error

\fn platform_t system_platform( void )
\brief Get platform
\details Get current platform.
\return Platform identifier

\fn architecture_t system_architecture( void )
\brief Get architecture
\details Get current architecture.
\return Architecture identifier

\fn byteorder_t system_byteorder( void )
\brief Get byte order
\details Get current byte order.
\return Byte order identifier

\fn unsigned int system_hardware_threads( void )
\brief Get number of hardware execution threads
\details Get number of hardware execution threads the process can utilize.
\return Number of hardware threads

\fn const char* system_hostname( void )
\brief Get host name
\details Get current host name of system.
\return Host name (static buffer)

\fn uint64_t system_hostid( void )
\brief Get host id
\details Get current host id (MAC address).
\return Host id

\fn const char* system_username( void )
\brief Get user name
\details Get user name of user executing process.
\return User name (static buffer)

\fn bool system_debugger_attached( void )
\brief Query if debugger is attached
\details Query if debugger is attached.
\return true if debugger is attached, false if not

\fn void system_pause( void )
\brief Pause
\details Windows only, execute pause operating system command

\fn uint16_t system_language( void )
\brief Get current language
\details Get the currently set language.
\return Currently set language code

\fn uint16_t system_country( void )
\brief Get current country
\details Get the currently set country.
\return Currently set country code

\fn uint32_t system_locale( void )
\brief Get current locale
\details Get the currently set locale (country & language).
\return Currently set locale identifier (country & language)

\fn const char* system_locale_string( void )
\brief Get current locale
\details Get the currently set locale name.
\return Currently set locale as a string identifier

\fn device_orientation_t system_device_orientation( void )
\brief Get current device orientation
\details Get the current device orientation.
\return Device orientation

\fn system_set_device_orientation( device_orientation_t orientation )
\brief Set current device orientation
\details Set the current device orientation. Usually only called internally by system event listeners.
\param orientation New device orientation

\fn void system_process_events( void )
\brief Process events
\details Process system events. You should call this once every loop iteration in your main loop.

\fn bool system_message_box( const char* title, const char* message, bool cancel_button )
\brief Popup message box
\details Popup a system message box to the user.
\param title Title of the message box
\param message Message displayed in the box
\param cancel_button Flag to trigger a cancel button as well as the default ok button
\return true if ok button pressed, false if cancel button pressed

\fn event_stream_t* system_event_stream( void )
\brief Get system event stream
\details Get system event stream.
\return System event stream

\fn void system_post_event( foundation_event_id event )
\brief Post event
\details Post a system event to the system event stream.
\param event Event identifier

*/
