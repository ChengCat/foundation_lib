
/*!

\file log.h
\brief Log output, filtering, context handling and callbacks
\details Log output, filtering, context handling and callbacks. Logging is centered around two concepts,
a context and a level. Log messages can be filtered on both, with a specific threshold available
for each context.

A context is identified by a hash value, normally a static string hash.

A log level is either debug, info, warning, error or panic (in increasing order of significance).

Using different function calls for different log levels allows build-time contol over code
generation. Disabling log debug message build flag would make all log_debug/log_debugf calls
to be statically removed at compile time instead of filtered at runtime, reducing binary
size and call overhead. By enabling the build flag and instead using a log context level
filter a runtime selection of log messages can be selected instead.


\def log_debug
\brief Log unformatted debug message
\details Log an unformatted debug message in the specific context
\param context Log context
\param msg Log message

\fn void log_debugf( uint64_t context, const char* format, ... )
\brief Log formatted debug message
\details Log formatted debug message in specified log context
\param context Log context
\param format Log message format specifier

\def log_info
\brief Log formatted info message
\details Log an unformatted info message in the specific context
\param context Log context
\param msg Log message

\fn void log_infof( uint64_t context, const char* format, ... )
\brief Log formatted info message
\details Log formatted info message in specified log context
\param context Log context
\param format Log message format

\def log_warn
\brief Log unformatted warning message
\details Log an unformatted warning message in the specific context
\param context Log context
\param warn Warning type
\param msg Log message

\fn void log_warnf( uint64_t context, warning_t warn, const char* format, ... )
\brief Log formatted warning message
\details Log formatted warning message in specified log context
\param context Log context
\param warn Warning type
\param format Log message format

\def log_error
\brief Log unformatted error message
\details Log an unformatted error message in the specific context. Will also
report the error code through error_report
\param context Log context
\param err Error code
\param msg Log message

\fn void log_errorf( uint64_t context, error_t err, const char* format, ... )
\brief Log formatted error message
\details Log formatted error message in specified log context. Will also
report the error code through error_report
\param context Log context
\param err Error code
\param format Log message format

\def log_panic
\brief Log unformatted panic message
\details Log an unformatted panic message in the specific context. Will also
report the error code through error_report
\param context Log context
\param err Error code
\param msg Log message

\fn void log_panicf( uint64_t context, error_t err, const char* format, ... )
\brief Log formatted panic message
\details Log formatted panic message in specified log context
\param context Log context
\param err Error code
\param format Log message format

\fn void log_error_context( uint64_t context, error_level_t error_level )
\brief Log current error context
\details Log the current error context in the specified log context. The log output is filtered at the given severity level
\param context Log context
\param error_level Severity level

\fn log_callback_fn log_callback( void )
\brief Get log callback
\details Get the currently set log callback
\return Log callback

\fn void log_set_callback( log_callback_fn callback )
\brief Set log callback
\details Set log callback
\param callback New callback

\fn void log_enable_stdout( bool enable )
\brief Control log output to stdout
\details Control log output to stdout
\param enable Flag to enable/disable output to stdout

\fn void log_enable_prefix( bool enable )
\brief Control output of prefix information
\details Control output of prefix information
\param enable Flag to enable/disable prefix output

\fn void log_set_suppress( uint64_t context, error_level_t level )
\brief Control log suppression
\details Control log suppression based on severity level. Any messages at the
given severity level or lower will be filtered and discarded. If a log context
has no explicit supression level the default (0) context supression level will be used.
\param context Log context
\param level Severity level to discard

\fn error_level_t log_suppress( uint64_t context )
\brief Get current log suppression
\details Get current log supression level for the given context
\param context Log context
\return Severity level being discarded for the given context

\fn void log_suppress_clear( void )
\brief Clear all log suppression for all contexts
\details Clear all log suppression for all contexts

*/
