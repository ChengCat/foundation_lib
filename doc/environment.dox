
/*!

\file environment.h
\brief Application environment
\details Application environment


\fn const char* const* environment_command_line( void )
\brief Get command line
\details Get command line as a string array. Returned array of strings must not be modified or deallocated.
\return Command line array

\fn const char* environment_executable_name( void )
\brief Get executable name
\details Get executable name. Returned string must not be modified or deallocated.
\return Executable name

\fn const char* environment_executable_directory( void )
\brief Get executable directory
\details Get executable directory (directory containing the executable binary).
Returned string must not be modified or deallocated.
\return Executable directory

\fn const char* environment_executable_path( void )
\brief Get executable full path
\details Get executable full path. Returned string must not be modified or deallocated.
\return Executable path

\fn const char* environment_initial_working_directory( void )
\brief Get initial working directory
\details Get initial working directory. Returned string must not be modified or deallocated.
\return Initial working directory

\fn const char* environment_current_working_directory( void )
\brief Get current working directory
\details Get current working directory. Returned string must not be modified or deallocated.
\return Current working directory

\fn void environment_set_current_working_directory( const char* path )
\brief Change current working directory
\details Change the current working directory
\param path Path of new working directory

\fn const char* environment_home_directory( void )
\brief Get user home directory
\details Get user home directory. Returned string must not be modified or deallocated.
Home directory is platform specific and is a suitable path for preference and per-user storage
\return User home directory

\fn const char* environment_temporary_directory( void )
\brief Get temporary directory
\details Get temporary directory. Returned string must not be modified or deallocated.
Temporary directory is platform specific and only guaranteed to exist during the execution of the process
\return Temporary directory

\fn const char* environment_variable( const char* var )
\brief Get environment variable
\details Get environment variable. Returned string must not be modified or deallocated.
\param var Variable name
\return Variable value

\fn const application_t* environment_application( void )
\brief Get application declaration
\details Get the application declaration as set by the application implementation
\return Application declaration

\fn void environment_bundle_identifier( char* buffer, unsigned int maxlength )
\brief Get application bundle identifier
\details MacOS X and iOS only. Get the application bundle identifier
\param buffer Buffer receiving string
\param maxlength Size of buffer in bytes

*/
