
/*!

\file path.h
\brief Path utilities
\details Path utilities for unifying, merging, cleaning and extracting path parts.

All function expect the path to be of a well formed format using forward
slashes only, such as [protocol://][drive:][/]path/to/some/file[.ext],
except for path_clean and path_make_absolute

Use path_clean and path_make_absolute to create well formed paths from
unknown formats


\fn char* path_base_file_name( const char* path )
\brief Get base file name
\details Get base file name (no path and no extension) from full path name
\param path Full path
\return File base name

\fn char* path_base_file_name_with_path( const char* path )
\brief Get base file name with path
\details Get base file name with path (no extension) from full path name
\param path Full path
\return File base name with path

\fn char* path_file_extension( const char* path )
\brief Get file extension
\details Get file extension (string after last dot) from full path name, not including the dot.
\param path Full path
\return File extension

\fn char* path_file_name( const char* path )
\brief Get file name
\details Get file name (no path but with extension) from full path name
\param path Full path
\return File full name

\fn char* path_directory_name( const char* path )
\brief Get path name
\details Get directory name from full path name. Any protocol in the path will be stripped.
\param path Full path
\return Path name

\fn char* path_subdirectory_name( const char* path, const char* root )
\brief Get subdirectory name
\details Get subdirectory name from full path name and root directory. If the full path is an absolute path,
the root directory must also be an absolute path (and vice versa). Protocols will be stripped
before matching paths (which will then be treated as absolute paths) and will not be included in the
subpath returned.
\param path Full path
\param root Root full path
\return Subpath name within root directory, empty string if not in root directory

\fn char* path_protocol( const char* uri )
\brief Get protocol
\details Get protocol from full URI (for example, "http://foo.com/some.file" will return "http")
\param uri URI
\return Protocol

\fn char* path_merge( const char* first, const char* second )
\brief Merge paths
\details Merge and cleanup paths, allocating new string for merged path
\param first  First path
\param second Second path
\return Path that is merged path, first + second

\fn char* path_append( char* base, const char* tail )
\brief Append path
\details Append and cleanup paths. Modifies and returns new pointer for first string
\param base Base path
\param tail Path to append
\return Merged path

\fn char* path_prepend( char* tail, const char* base )
\brief Prepend path
\details Prepend and cleanup paths. Modifies and returns new pointer for first string
\param tail Tail of path
\param base Path to prepend
\return Merged path

\fn char* path_clean( char* path, bool absolute )
\brief Clean up path
\details Clean up path by replacing windows backslash with slash and cleaning up multiple concurrent slashes. Any slash characters
at end of path will be removed as well (except if resulting path is "/"). This method recognizes network protocol separator and will only clean file path part
of such URI:s. Furthermore, any parts of the path of type "/./" will be condensed to "/". The operations are in-place,
which means that the given string will be modified and potentially reallocated in case string needs to grow.
\param path Path string
\param absolute Flag indicating absolute path. If true (default) a slash will be inserted at start of path if missing, if false any existing leading slashes will be removed
\return Cleaned path string

\fn bool path_is_absolute( const char* path )
\brief Check if absolute
\details Check if path is absolute. An absolute path is either an URI or a file path
that starts with a directory separator or a volume identificator
\param path Path
\return true if path is absolute, false if not

\fn char* path_make_absolute( const char* path )
\brief Make absolute
\details Make the path in real filesystem absolute by prepending the current working directory
if the path is relative, and cleaning out ".." and "." directories. Returns empty string
if error (invalid path).
\param path Path
\return Absolute path, empty string if error

\fn char* path_make_temporary( void )
\brief Create a temporary path
\details Create a temporary path, without extension mapping to a suitable filesystem temporary storage
\return A new unique temporary path

*/
