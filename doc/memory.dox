
/*!

\file memory.h
\brief Memory management
\details Memory allocation and deallocation. The actual implementation of allocation/deallocation can be
controlled with the memory system declaration given to #foundation_initialize at startup.

Memory allocation/deallocation can be tracked with memory_set_tracker if the build configuration
#BUILD_ENABLE_MEMORY_TRACKER is set to 1. If not, all memory tracker calls are statically removed
at compile time.

Memory can be tracked by context, set as a hash value (usually a static string hash) if the build
configuration #BUILD_ENABLE_MEMORY_CONTEXT is set to 1. If not, all memory context calls are statically
removed and context 0 is used everywhere. Memory contexts are stored per thread.


\fn void* memory_allocate( uint64_t context, uint64_t size, unsigned int align, int hint )
\brief Allocate memory
\details Allocate memory. Memory will be aligned to the given alingment unless
set to 0, which will cause alignment to be ignored. Memory hints can be given to allow the
memory system to make better choises of how to allocate the memory (see #memory_hint_t).
If context is 0, the currently set memory context scope is used (see #memory_context, #memory_context_push and #memory_context_pop)
\param context               Memory context
\param size                  Requested size
\param align                 Requested alignment
\param hint                  Hint flags
\return                      Memory address to a memory block of the requested size and alignment, 0 if out of memory

\fn void* memory_reallocate( void* p, uint64_t size, unsigned int align, uint64_t oldsize )
\brief Reallocate memory
\details Reallocate a memory block. Old memory content will be preserved, and if requested size is larger than the current size the
new memory area above the old size will be uninitialized. The currently set memory context is used for any allocation. It is safe to pass null
as the current memory block pointer.
\param p                     Current memory block pointer
\param size                  New requested size
\param align                 New requested alignment
\param oldsize               Previous size
\return                      Memory address to a (potentially new) memory block of the requested size and alignment, 0 if out of memory

\fn void memory_deallocate( void* p )
\brief Deallocate memory
\details Deallocate a memory block. Safe to pass a null pointer.
\param p Memory block pointer

\fn void memory_context_push( uint64_t context )
\brief Push context on memory context stack
\details Set a new current memory context by pushing it onto the context stack. A call
to #memory_context_pop will restore the previous memory context. Memory context
stack is thread-local, setting a new memory context will not affect the
current memory context of any other thread.
\param context               New memory context

\fn void memory_context_pop( void )
\brief Pop context from memory context stack
\details Pop the current memory context off the context stack and set the new current
memory context to the previous memory context (the one below on the context stack).
If no previous memory context is available on the stack, the current memory
context is set to 0.

\fn uint64_t memory_context( void )
\brief Get current memory context
\details Get the current memory context, or 0 if no context is set
\return Current memory context

\fn void memory_context_thread_deallocate( void )
\brief Cleanup memory context stack
\details Cleanup and deallocate any memory used for thread-local memory context data.
Called internally when a foundation thread is about to exit.

\fn void memory_set_tracker( memory_tracker_t tracker )
\brief Set current memory tracker
\details Set the current memory tracker, see #memory_tracker_local for a default implementation
\param tracker               New memory tracker declaration

\fn memory_system_t memory_system_malloc( void )
\brief Default malloc based memory system
\details Get the default malloc based memory system declaration for passing to #foundation_initialize
\return                      Default malloc based memory system declation

\fn memory_tracker_t memory_tracker_local( void )
\brief Default local memory tracker
\details Get the default local memory tracker declaration for passing to #memory_set_tracker
\return                      Default local memory tracker declaration

*/
