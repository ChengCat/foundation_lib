import os.path

Import("env")

# TEST LIBRARY
testlibsources = [ 'test/test.c' ]

testlibenv = env.Clone()
testlibenv.Append( CPPPATH=['#/test'] )

env['testlib'] = testlibenv.StaticLibrary( 'test', testlibsources )

testlibenv.AddPostAction( 'test', testlibenv.Install( '#lib/${platform}${platformsuffix}/${buildprofile}', [ env['testlib'] ] ) )


# TEST SUITES

testenv    = env.Clone()

testenv.Append( CPPPATH=['#/test'] )
testenv.Append( LIBPATH=['#/lib/${platform}${platformsuffix}/${buildprofile}'] )
testenv.Append( LIBS=[ 'test', 'foundation' ] )

if testenv['platform'] == 'linux':
	testenv.Append( LIBS=[ 'dl', 'rt', 'm' ] )
elif testenv['platform'] == 'raspberrypi':
	testenv.Append( LIBS=[ 'bcm_host', 'dl', 'rt', 'm' ] )
elif testenv['platform'] == 'win32' or testenv['platform'] == 'win64':
	testenv.Append( LIBS=[ 'user32', 'shell32', 'advapi32' ] )
	if testenv['CC'] == 'cl' or testenv['CC'] == 'icl':
		testenv.Append( LINKFLAGS=['/SUBSYSTEM:CONSOLE'])

def makeTest( name ):
    global env
    global testenv
    finalenv = testenv.Clone()
    if finalenv['platform'] == 'win32' or finalenv['platform'] == 'win64':
        if finalenv['CC'] == 'cl' or finalenv['CC'] == 'icl':
            finalenv['bindir'] = 'bin/${platform}${platformsuffix}/${buildprofile}'
            finalenv.Append( LINKFLAGS=['/PDB:\"${bindir}/test-' + name + '${prgsuffix}.pdb\"'])
    env[name + 'test'] = finalenv.Program( 'test-' + name + '${prgsuffix}', name + '/main.c' )
    finalenv.AddPostAction( 'test-' + name + '${prgsuffix}', finalenv.Install( '#bin/${platform}${platformsuffix}/${buildprofile}', [ env[name + 'test'] ] ) )

makeTest('all')
makeTest('app')
makeTest('array')
makeTest('atomic')
makeTest('base64')
makeTest('bitbuffer')
makeTest('blowfish')
makeTest('bufferstream')
makeTest('config')
makeTest('crash')
makeTest('environment')
makeTest('error')
makeTest('event')
makeTest('fs')
makeTest('hash')
makeTest('hashmap')
makeTest('hashtable')
makeTest('library')
makeTest('math')
makeTest('md5')
makeTest('mutex')
makeTest('objectmap')
makeTest('path')
makeTest('pipe')
makeTest('profile')
makeTest('radixsort')
makeTest('ringbuffer')
makeTest('regex')
makeTest('semaphore')
makeTest('stacktrace')
makeTest('string')
makeTest('uuid')
