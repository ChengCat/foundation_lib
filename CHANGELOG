
1.5.0

Added a minimal in-place JSON parser. Also parses simplified JSON.

Added implementation SHA-2 256 and 512 bit algorithms, including uint256_t and uint512_t
representation data types with string conversions.

Changed configuration module to use explicit given configuration storage. Changed config
storage format to use simplified json. Removed config_load function.

Changed byte order representation of raw digest from md5_get_digest_raw to generate
correct string representation using string_from_uint128.

Changed environment_home_directory to environment_application_directory and modify
implementations to generate a application-specific path for persistent storage. Removed
application config_dir declaration.

Changed crash_* functions to more aptly named exception_* and added support for
non-Microsoft compilers on Windows.

Changed name of error callback and log callback to "handler" to unify naming with
exception handling.

Support for building as a shared object (dynamic library).

Support for Intel, clang and gcc compilers on Windows.

Android build now requires NDK r11 and uses clang by default, with built in
thread local storage support instead of old pthread api wrappers.

Refactored the ninja build generator into modules to be easier to extend and maintain
instead of a single monolithic file. Minor changes in generator interface.


1.4.1

Thread API change. Threads are now explicit structures instead of reference counted
resources. Thread notification changed to a signal beacon. Finalizing a thread will
join the thread and free resources.

Added beacon, a compound synchronization primitive unifying WaitForMultipleObjects
and epoll in a platform abstraction interface. Extended event streams to be able to
fire a beacon on event post.

path_directory_name now preserves protocols, path_subdirectory_name changed into
path_subpath which matches protocols and returns subpaths instead of subdirectories.


1.4.0

Major API changes, 1.4.x is not in any way compatible with previous releases.

All string APIs and functions taking string arguments have been extended to take and supply
an explicit length argument/result, in order to avoid extra strlen calls to determine an
already known length. All length arguments are explicit, zero no longer implicitly mean
length of zero-terminated string passed in pointer. Pointer is assumed to be valid if length
is non-zero, no additional null pointer checks are done.

Path and string functions no longer automagically reallocate passed arguments. Functions
now exist in two flavours, one acting on a passed buffer (best effort) and one allocating
a new buffer.

Size of buffers and objects are now denoted by size_t type arguments, not unsigned int.

Functions returning arrays as result now generally take a preallocated array of given size
as argument to avoid extra memory allocations.

Build time size limit configuration in build.h have been moved to a run time configuration
block passed to foundation_initialize.

All shutdown functions have been renamed to finalize to better match the initialize function
naming scheme.

system_* functions returning strings now take a buffer argument for thread safety. Returned
string will be in supplied buffer.
